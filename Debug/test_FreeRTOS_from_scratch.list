
test_FreeRTOS_from_scratch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ee8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004fa8  08004fa8  00014fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005074  08005074  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005074  08005074  00015074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800507c  0800507c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800507c  0800507c  0001507c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005080  08005080  00015080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ec8  20000014  08005098  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000edc  08005098  00020edc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015858  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314f  00000000  00000000  00035894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  000389e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  00039d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b22  00000000  00000000  0003af10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016afd  00000000  00000000  00054a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a83de  00000000  00000000  0006b52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011390d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c8  00000000  00000000  00113960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004f90 	.word	0x08004f90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08004f90 	.word	0x08004f90

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b089      	sub	sp, #36	; 0x24
 8000624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	240c      	movs	r4, #12
 8000628:	193b      	adds	r3, r7, r4
 800062a:	0018      	movs	r0, r3
 800062c:	2314      	movs	r3, #20
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f004 fca4 	bl	8004f7e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <MX_GPIO_Init+0x9c>)
 8000638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800063a:	4b20      	ldr	r3, [pc, #128]	; (80006bc <MX_GPIO_Init+0x9c>)
 800063c:	2104      	movs	r1, #4
 800063e:	430a      	orrs	r2, r1
 8000640:	635a      	str	r2, [r3, #52]	; 0x34
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <MX_GPIO_Init+0x9c>)
 8000644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000646:	2204      	movs	r2, #4
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_GPIO_Init+0x9c>)
 8000650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_GPIO_Init+0x9c>)
 8000654:	2120      	movs	r1, #32
 8000656:	430a      	orrs	r2, r1
 8000658:	635a      	str	r2, [r3, #52]	; 0x34
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_GPIO_Init+0x9c>)
 800065c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065e:	2220      	movs	r2, #32
 8000660:	4013      	ands	r3, r2
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_GPIO_Init+0x9c>)
 8000668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_GPIO_Init+0x9c>)
 800066c:	2101      	movs	r1, #1
 800066e:	430a      	orrs	r2, r1
 8000670:	635a      	str	r2, [r3, #52]	; 0x34
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_GPIO_Init+0x9c>)
 8000674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000676:	2201      	movs	r2, #1
 8000678:	4013      	ands	r3, r2
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800067e:	23a0      	movs	r3, #160	; 0xa0
 8000680:	05db      	lsls	r3, r3, #23
 8000682:	2200      	movs	r2, #0
 8000684:	2120      	movs	r1, #32
 8000686:	0018      	movs	r0, r3
 8000688:	f000 fc9e 	bl	8000fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800068c:	0021      	movs	r1, r4
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2220      	movs	r2, #32
 8000692:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2201      	movs	r2, #1
 8000698:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2202      	movs	r2, #2
 80006a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006a6:	187a      	adds	r2, r7, r1
 80006a8:	23a0      	movs	r3, #160	; 0xa0
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	0011      	movs	r1, r2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fb26 	bl	8000d00 <HAL_GPIO_Init>

}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b009      	add	sp, #36	; 0x24
 80006ba:	bd90      	pop	{r4, r7, pc}
 80006bc:	40021000 	.word	0x40021000

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f000 fa31 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f817 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f7ff ffa7 	bl	8000620 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006d2:	f000 f953 	bl	800097c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // prepare HW to use
  prvSetupHardware();
 80006d6:	f000 f877 	bl	80007c8 <prvSetupHardware>

  xTaskHandle xHandleTaskLed;
  xTaskCreate(vTaskLed, (portCHAR *) "Led",
 80006da:	4906      	ldr	r1, [pc, #24]	; (80006f4 <main+0x34>)
 80006dc:	4806      	ldr	r0, [pc, #24]	; (80006f8 <main+0x38>)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	2302      	movs	r3, #2
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2300      	movs	r3, #0
 80006e8:	2264      	movs	r2, #100	; 0x64
 80006ea:	f002 ff90 	bl	800360e <xTaskCreate>
              100, NULL, 2,
              &xHandleTaskLed);

  // start scheduler
  vTaskStartScheduler();
 80006ee:	f003 f957 	bl	80039a0 <vTaskStartScheduler>
  // below here is unreachable
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <main+0x32>
 80006f4:	08004fa8 	.word	0x08004fa8
 80006f8:	080007a3 	.word	0x080007a3

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b093      	sub	sp, #76	; 0x4c
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	2410      	movs	r4, #16
 8000704:	193b      	adds	r3, r7, r4
 8000706:	0018      	movs	r0, r3
 8000708:	2338      	movs	r3, #56	; 0x38
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f004 fc36 	bl	8004f7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	003b      	movs	r3, r7
 8000714:	0018      	movs	r0, r3
 8000716:	2310      	movs	r3, #16
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f004 fc2f 	bl	8004f7e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	0018      	movs	r0, r3
 8000726:	f000 fc87 	bl	8001038 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2202      	movs	r2, #2
 800072e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000730:	193b      	adds	r3, r7, r4
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	0052      	lsls	r2, r2, #1
 8000736:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2240      	movs	r2, #64	; 0x40
 8000742:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	193b      	adds	r3, r7, r4
 800074c:	0018      	movs	r0, r3
 800074e:	f000 fcbf 	bl	80010d0 <HAL_RCC_OscConfig>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000756:	f000 f84c 	bl	80007f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	003b      	movs	r3, r7
 800075c:	2207      	movs	r2, #7
 800075e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000760:	003b      	movs	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	003b      	movs	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076c:	003b      	movs	r3, r7
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000772:	003b      	movs	r3, r7
 8000774:	2100      	movs	r1, #0
 8000776:	0018      	movs	r0, r3
 8000778:	f000 ffc4 	bl	8001704 <HAL_RCC_ClockConfig>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000780:	f000 f837 	bl	80007f2 <Error_Handler>
  }
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b013      	add	sp, #76	; 0x4c
 800078a:	bd90      	pop	{r4, r7, pc}

0800078c <vhToggleLed>:

/* USER CODE BEGIN 4 */
void vhToggleLed(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000790:	23a0      	movs	r3, #160	; 0xa0
 8000792:	05db      	lsls	r3, r3, #23
 8000794:	2120      	movs	r1, #32
 8000796:	0018      	movs	r0, r3
 8000798:	f000 fc33 	bl	8001002 <HAL_GPIO_TogglePin>
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <vTaskLed>:

void vTaskLed(void *pvParameters)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
  portTickType xLastFlashTime;
  xLastFlashTime = xTaskGetTickCount();
 80007aa:	f003 fa2d 	bl	8003c08 <xTaskGetTickCount>
 80007ae:	0003      	movs	r3, r0
 80007b0:	60fb      	str	r3, [r7, #12]
  for (;;)
  {
    vhToggleLed();
 80007b2:	f7ff ffeb 	bl	800078c <vhToggleLed>
    vTaskDelayUntil(&xLastFlashTime, 500 / portTICK_RATE_MS);
 80007b6:	23fa      	movs	r3, #250	; 0xfa
 80007b8:	005a      	lsls	r2, r3, #1
 80007ba:	230c      	movs	r3, #12
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	0011      	movs	r1, r2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f003 f891 	bl	80038e8 <xTaskDelayUntil>
    vhToggleLed();
 80007c6:	e7f4      	b.n	80007b2 <vTaskLed+0x10>

080007c8 <prvSetupHardware>:
  }
}
static void prvSetupHardware(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	2380      	movs	r3, #128	; 0x80
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d101      	bne.n	80007ea <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80007e6:	f000 f9c1 	bl	8000b6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b002      	add	sp, #8
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f6:	b672      	cpsid	i
}
 80007f8:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fa:	e7fe      	b.n	80007fa <Error_Handler+0x8>

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <HAL_MspInit+0x44>)
 8000804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <HAL_MspInit+0x44>)
 8000808:	2101      	movs	r1, #1
 800080a:	430a      	orrs	r2, r1
 800080c:	641a      	str	r2, [r3, #64]	; 0x40
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <HAL_MspInit+0x44>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	2201      	movs	r2, #1
 8000814:	4013      	ands	r3, r2
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_MspInit+0x44>)
 800081c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_MspInit+0x44>)
 8000820:	2180      	movs	r1, #128	; 0x80
 8000822:	0549      	lsls	r1, r1, #21
 8000824:	430a      	orrs	r2, r1
 8000826:	63da      	str	r2, [r3, #60]	; 0x3c
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_MspInit+0x44>)
 800082a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	055b      	lsls	r3, r3, #21
 8000830:	4013      	ands	r3, r2
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b002      	add	sp, #8
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b5b0      	push	{r4, r5, r7, lr}
 8000846:	b08c      	sub	sp, #48	; 0x30
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800084c:	232b      	movs	r3, #43	; 0x2b
 800084e:	18fb      	adds	r3, r7, r3
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000854:	4b38      	ldr	r3, [pc, #224]	; (8000938 <HAL_InitTick+0xf4>)
 8000856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <HAL_InitTick+0xf4>)
 800085a:	2101      	movs	r1, #1
 800085c:	430a      	orrs	r2, r1
 800085e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000860:	4b35      	ldr	r3, [pc, #212]	; (8000938 <HAL_InitTick+0xf4>)
 8000862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000864:	2201      	movs	r2, #1
 8000866:	4013      	ands	r3, r2
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800086c:	230c      	movs	r3, #12
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2410      	movs	r4, #16
 8000872:	193b      	adds	r3, r7, r4
 8000874:	0011      	movs	r1, r2
 8000876:	0018      	movs	r0, r3
 8000878:	f001 f8ee 	bl	8001a58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000884:	2b00      	cmp	r3, #0
 8000886:	d104      	bne.n	8000892 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000888:	f001 f8d0 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 800088c:	0003      	movs	r3, r0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000890:	e004      	b.n	800089c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000892:	f001 f8cb 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 8000896:	0003      	movs	r3, r0
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800089c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800089e:	4927      	ldr	r1, [pc, #156]	; (800093c <HAL_InitTick+0xf8>)
 80008a0:	0018      	movs	r0, r3
 80008a2:	f7ff fc31 	bl	8000108 <__udivsi3>
 80008a6:	0003      	movs	r3, r0
 80008a8:	3b01      	subs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80008ac:	4b24      	ldr	r3, [pc, #144]	; (8000940 <HAL_InitTick+0xfc>)
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	05d2      	lsls	r2, r2, #23
 80008b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <HAL_InitTick+0xfc>)
 80008b6:	4a23      	ldr	r2, [pc, #140]	; (8000944 <HAL_InitTick+0x100>)
 80008b8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <HAL_InitTick+0xfc>)
 80008bc:	6a3a      	ldr	r2, [r7, #32]
 80008be:	605a      	str	r2, [r3, #4]
  htim2.Init.ClockDivision = 0;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <HAL_InitTick+0xfc>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <HAL_InitTick+0xfc>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008cc:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <HAL_InitTick+0xfc>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80008d2:	252b      	movs	r5, #43	; 0x2b
 80008d4:	197c      	adds	r4, r7, r5
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <HAL_InitTick+0xfc>)
 80008d8:	0018      	movs	r0, r3
 80008da:	f001 fa9f 	bl	8001e1c <HAL_TIM_Base_Init>
 80008de:	0003      	movs	r3, r0
 80008e0:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80008e2:	197b      	adds	r3, r7, r5
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d11e      	bne.n	8000928 <HAL_InitTick+0xe4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80008ea:	197c      	adds	r4, r7, r5
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <HAL_InitTick+0xfc>)
 80008ee:	0018      	movs	r0, r3
 80008f0:	f001 faf4 	bl	8001edc <HAL_TIM_Base_Start_IT>
 80008f4:	0003      	movs	r3, r0
 80008f6:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80008f8:	197b      	adds	r3, r7, r5
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d113      	bne.n	8000928 <HAL_InitTick+0xe4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000900:	200f      	movs	r0, #15
 8000902:	f000 f9ec 	bl	8000cde <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b03      	cmp	r3, #3
 800090a:	d809      	bhi.n	8000920 <HAL_InitTick+0xdc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	0019      	movs	r1, r3
 8000912:	200f      	movs	r0, #15
 8000914:	f000 f9ce 	bl	8000cb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_InitTick+0x104>)
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	e003      	b.n	8000928 <HAL_InitTick+0xe4>
      }
      else
      {
        status = HAL_ERROR;
 8000920:	232b      	movs	r3, #43	; 0x2b
 8000922:	18fb      	adds	r3, r7, r3
 8000924:	2201      	movs	r2, #1
 8000926:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000928:	232b      	movs	r3, #43	; 0x2b
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	781b      	ldrb	r3, [r3, #0]
}
 800092e:	0018      	movs	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	b00c      	add	sp, #48	; 0x30
 8000934:	bdb0      	pop	{r4, r5, r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	40021000 	.word	0x40021000
 800093c:	000f4240 	.word	0x000f4240
 8000940:	20000030 	.word	0x20000030
 8000944:	000003e7 	.word	0x000003e7
 8000948:	20000004 	.word	0x20000004

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <TIM2_IRQHandler+0x14>)
 800095e:	0018      	movs	r0, r3
 8000960:	f001 fb18 	bl	8001f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	20000030 	.word	0x20000030

08000970 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000980:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 8000982:	4a24      	ldr	r2, [pc, #144]	; (8000a14 <MX_USART2_UART_Init+0x98>)
 8000984:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000986:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 8000988:	22e1      	movs	r2, #225	; 0xe1
 800098a:	0252      	lsls	r2, r2, #9
 800098c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 fcce 	bl	8002368 <HAL_UART_Init>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009d0:	f7ff ff0f 	bl	80007f2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009d6:	2100      	movs	r1, #0
 80009d8:	0018      	movs	r0, r3
 80009da:	f002 f9dd 	bl	8002d98 <HAL_UARTEx_SetTxFifoThreshold>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009e2:	f7ff ff06 	bl	80007f2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009e8:	2100      	movs	r1, #0
 80009ea:	0018      	movs	r0, r3
 80009ec:	f002 fa14 	bl	8002e18 <HAL_UARTEx_SetRxFifoThreshold>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009f4:	f7ff fefd 	bl	80007f2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f002 f992 	bl	8002d24 <HAL_UARTEx_DisableFifoMode>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a04:	f7ff fef5 	bl	80007f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	2000007c 	.word	0x2000007c
 8000a14:	40004400 	.word	0x40004400

08000a18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b097      	sub	sp, #92	; 0x5c
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	2344      	movs	r3, #68	; 0x44
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	0018      	movs	r0, r3
 8000a26:	2314      	movs	r3, #20
 8000a28:	001a      	movs	r2, r3
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	f004 faa7 	bl	8004f7e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a30:	2410      	movs	r4, #16
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	0018      	movs	r0, r3
 8000a36:	2334      	movs	r3, #52	; 0x34
 8000a38:	001a      	movs	r2, r3
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f004 fa9f 	bl	8004f7e <memset>
  if(uartHandle->Instance==USART2)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a22      	ldr	r2, [pc, #136]	; (8000ad0 <HAL_UART_MspInit+0xb8>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d13e      	bne.n	8000ac8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f001 f827 	bl	8001aac <HAL_RCCEx_PeriphCLKConfig>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a62:	f7ff fec6 	bl	80007f2 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a66:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <HAL_UART_MspInit+0xbc>)
 8000a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <HAL_UART_MspInit+0xbc>)
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	0289      	lsls	r1, r1, #10
 8000a70:	430a      	orrs	r2, r1
 8000a72:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <HAL_UART_MspInit+0xbc>)
 8000a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	029b      	lsls	r3, r3, #10
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_UART_MspInit+0xbc>)
 8000a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <HAL_UART_MspInit+0xbc>)
 8000a88:	2101      	movs	r1, #1
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_UART_MspInit+0xbc>)
 8000a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a92:	2201      	movs	r2, #1
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000a9a:	2144      	movs	r1, #68	; 0x44
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2201      	movs	r2, #1
 8000aac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	187a      	adds	r2, r7, r1
 8000abc:	23a0      	movs	r3, #160	; 0xa0
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	0011      	movs	r1, r2
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 f91c 	bl	8000d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b017      	add	sp, #92	; 0x5c
 8000ace:	bd90      	pop	{r4, r7, pc}
 8000ad0:	40004400 	.word	0x40004400
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ada:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000adc:	f7ff ff48 	bl	8000970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae0:	480c      	ldr	r0, [pc, #48]	; (8000b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ae2:	490d      	ldr	r1, [pc, #52]	; (8000b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <LoopForever+0xe>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af8:	4c0a      	ldr	r4, [pc, #40]	; (8000b24 <LoopForever+0x16>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b06:	f004 fa0d 	bl	8004f24 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b0a:	f7ff fdd9 	bl	80006c0 <main>

08000b0e <LoopForever>:

LoopForever:
  b LoopForever
 8000b0e:	e7fe      	b.n	8000b0e <LoopForever>
  ldr   r0, =_estack
 8000b10:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b1c:	08005084 	.word	0x08005084
  ldr r2, =_sbss
 8000b20:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b24:	20000edc 	.word	0x20000edc

08000b28 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC1_COMP_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <HAL_Init+0x3c>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_Init+0x3c>)
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	0049      	lsls	r1, r1, #1
 8000b42:	430a      	orrs	r2, r1
 8000b44:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b46:	2003      	movs	r0, #3
 8000b48:	f7ff fe7c 	bl	8000844 <HAL_InitTick>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	e001      	b.n	8000b5c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fe50 	bl	80007fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
}
 8000b60:	0018      	movs	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40022000 	.word	0x40022000

08000b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_IncTick+0x1c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	001a      	movs	r2, r3
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_IncTick+0x20>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	18d2      	adds	r2, r2, r3
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_IncTick+0x20>)
 8000b7e:	601a      	str	r2, [r3, #0]
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000110 	.word	0x20000110

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b02      	ldr	r3, [pc, #8]	; (8000ba0 <HAL_GetTick+0x10>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	20000110 	.word	0x20000110

08000ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	0002      	movs	r2, r0
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b7f      	cmp	r3, #127	; 0x7f
 8000bb6:	d809      	bhi.n	8000bcc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	231f      	movs	r3, #31
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <__NVIC_EnableIRQ+0x30>)
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4091      	lsls	r1, r2
 8000bc8:	000a      	movs	r2, r1
 8000bca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	0002      	movs	r2, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b7f      	cmp	r3, #127	; 0x7f
 8000bec:	d828      	bhi.n	8000c40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bee:	4a2f      	ldr	r2, [pc, #188]	; (8000cac <__NVIC_SetPriority+0xd4>)
 8000bf0:	1dfb      	adds	r3, r7, #7
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	33c0      	adds	r3, #192	; 0xc0
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	589b      	ldr	r3, [r3, r2]
 8000bfe:	1dfa      	adds	r2, r7, #7
 8000c00:	7812      	ldrb	r2, [r2, #0]
 8000c02:	0011      	movs	r1, r2
 8000c04:	2203      	movs	r2, #3
 8000c06:	400a      	ands	r2, r1
 8000c08:	00d2      	lsls	r2, r2, #3
 8000c0a:	21ff      	movs	r1, #255	; 0xff
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	000a      	movs	r2, r1
 8000c10:	43d2      	mvns	r2, r2
 8000c12:	401a      	ands	r2, r3
 8000c14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	019b      	lsls	r3, r3, #6
 8000c1a:	22ff      	movs	r2, #255	; 0xff
 8000c1c:	401a      	ands	r2, r3
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	0018      	movs	r0, r3
 8000c24:	2303      	movs	r3, #3
 8000c26:	4003      	ands	r3, r0
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c2c:	481f      	ldr	r0, [pc, #124]	; (8000cac <__NVIC_SetPriority+0xd4>)
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	089b      	lsrs	r3, r3, #2
 8000c36:	430a      	orrs	r2, r1
 8000c38:	33c0      	adds	r3, #192	; 0xc0
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c3e:	e031      	b.n	8000ca4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c40:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <__NVIC_SetPriority+0xd8>)
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	0019      	movs	r1, r3
 8000c48:	230f      	movs	r3, #15
 8000c4a:	400b      	ands	r3, r1
 8000c4c:	3b08      	subs	r3, #8
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	3306      	adds	r3, #6
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	18d3      	adds	r3, r2, r3
 8000c56:	3304      	adds	r3, #4
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	1dfa      	adds	r2, r7, #7
 8000c5c:	7812      	ldrb	r2, [r2, #0]
 8000c5e:	0011      	movs	r1, r2
 8000c60:	2203      	movs	r2, #3
 8000c62:	400a      	ands	r2, r1
 8000c64:	00d2      	lsls	r2, r2, #3
 8000c66:	21ff      	movs	r1, #255	; 0xff
 8000c68:	4091      	lsls	r1, r2
 8000c6a:	000a      	movs	r2, r1
 8000c6c:	43d2      	mvns	r2, r2
 8000c6e:	401a      	ands	r2, r3
 8000c70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	019b      	lsls	r3, r3, #6
 8000c76:	22ff      	movs	r2, #255	; 0xff
 8000c78:	401a      	ands	r2, r3
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	0018      	movs	r0, r3
 8000c80:	2303      	movs	r3, #3
 8000c82:	4003      	ands	r3, r0
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <__NVIC_SetPriority+0xd8>)
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	001c      	movs	r4, r3
 8000c90:	230f      	movs	r3, #15
 8000c92:	4023      	ands	r3, r4
 8000c94:	3b08      	subs	r3, #8
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	3306      	adds	r3, #6
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	18c3      	adds	r3, r0, r3
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	601a      	str	r2, [r3, #0]
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b003      	add	sp, #12
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	e000e100 	.word	0xe000e100
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	210f      	movs	r1, #15
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	1c02      	adds	r2, r0, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	0011      	movs	r1, r2
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f7ff ff81 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b004      	add	sp, #16
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	0002      	movs	r2, r0
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff ff57 	bl	8000ba4 <__NVIC_EnableIRQ>
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0e:	e147      	b.n	8000fa0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2101      	movs	r1, #1
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	4091      	lsls	r1, r2
 8000d1a:	000a      	movs	r2, r1
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d100      	bne.n	8000d28 <HAL_GPIO_Init+0x28>
 8000d26:	e138      	b.n	8000f9a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	4013      	ands	r3, r2
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d005      	beq.n	8000d40 <HAL_GPIO_Init+0x40>
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2203      	movs	r2, #3
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d130      	bne.n	8000da2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	409a      	lsls	r2, r3
 8000d4e:	0013      	movs	r3, r2
 8000d50:	43da      	mvns	r2, r3
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	409a      	lsls	r2, r3
 8000d62:	0013      	movs	r3, r2
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d76:	2201      	movs	r2, #1
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
 8000d7c:	0013      	movs	r3, r2
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	091b      	lsrs	r3, r3, #4
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2203      	movs	r2, #3
 8000da8:	4013      	ands	r3, r2
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d017      	beq.n	8000dde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	2203      	movs	r2, #3
 8000dba:	409a      	lsls	r2, r3
 8000dbc:	0013      	movs	r3, r2
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2203      	movs	r2, #3
 8000de4:	4013      	ands	r3, r2
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d123      	bne.n	8000e32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	08da      	lsrs	r2, r3, #3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3208      	adds	r2, #8
 8000df2:	0092      	lsls	r2, r2, #2
 8000df4:	58d3      	ldr	r3, [r2, r3]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	2207      	movs	r2, #7
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	220f      	movs	r2, #15
 8000e02:	409a      	lsls	r2, r3
 8000e04:	0013      	movs	r3, r2
 8000e06:	43da      	mvns	r2, r3
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	691a      	ldr	r2, [r3, #16]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	2107      	movs	r1, #7
 8000e16:	400b      	ands	r3, r1
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	0013      	movs	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	08da      	lsrs	r2, r3, #3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3208      	adds	r2, #8
 8000e2c:	0092      	lsls	r2, r2, #2
 8000e2e:	6939      	ldr	r1, [r7, #16]
 8000e30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	0013      	movs	r3, r2
 8000e42:	43da      	mvns	r2, r3
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2203      	movs	r2, #3
 8000e50:	401a      	ands	r2, r3
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	409a      	lsls	r2, r3
 8000e58:	0013      	movs	r3, r2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	23c0      	movs	r3, #192	; 0xc0
 8000e6c:	029b      	lsls	r3, r3, #10
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d100      	bne.n	8000e74 <HAL_GPIO_Init+0x174>
 8000e72:	e092      	b.n	8000f9a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e74:	4a50      	ldr	r2, [pc, #320]	; (8000fb8 <HAL_GPIO_Init+0x2b8>)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	3318      	adds	r3, #24
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	589b      	ldr	r3, [r3, r2]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	2203      	movs	r2, #3
 8000e86:	4013      	ands	r3, r2
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	409a      	lsls	r2, r3
 8000e8e:	0013      	movs	r3, r2
 8000e90:	43da      	mvns	r2, r3
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	23a0      	movs	r3, #160	; 0xa0
 8000e9c:	05db      	lsls	r3, r3, #23
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d013      	beq.n	8000eca <HAL_GPIO_Init+0x1ca>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a45      	ldr	r2, [pc, #276]	; (8000fbc <HAL_GPIO_Init+0x2bc>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d00d      	beq.n	8000ec6 <HAL_GPIO_Init+0x1c6>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a44      	ldr	r2, [pc, #272]	; (8000fc0 <HAL_GPIO_Init+0x2c0>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d007      	beq.n	8000ec2 <HAL_GPIO_Init+0x1c2>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a43      	ldr	r2, [pc, #268]	; (8000fc4 <HAL_GPIO_Init+0x2c4>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d101      	bne.n	8000ebe <HAL_GPIO_Init+0x1be>
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e006      	b.n	8000ecc <HAL_GPIO_Init+0x1cc>
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	e004      	b.n	8000ecc <HAL_GPIO_Init+0x1cc>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e002      	b.n	8000ecc <HAL_GPIO_Init+0x1cc>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <HAL_GPIO_Init+0x1cc>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	2103      	movs	r1, #3
 8000ed0:	400a      	ands	r2, r1
 8000ed2:	00d2      	lsls	r2, r2, #3
 8000ed4:	4093      	lsls	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000edc:	4936      	ldr	r1, [pc, #216]	; (8000fb8 <HAL_GPIO_Init+0x2b8>)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	3318      	adds	r3, #24
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eea:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <HAL_GPIO_Init+0x2b8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	035b      	lsls	r3, r3, #13
 8000f02:	4013      	ands	r3, r2
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <HAL_GPIO_Init+0x2b8>)
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <HAL_GPIO_Init+0x2b8>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	43da      	mvns	r2, r3
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	039b      	lsls	r3, r3, #14
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f38:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <HAL_GPIO_Init+0x2b8>)
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f3e:	4a1e      	ldr	r2, [pc, #120]	; (8000fb8 <HAL_GPIO_Init+0x2b8>)
 8000f40:	2384      	movs	r3, #132	; 0x84
 8000f42:	58d3      	ldr	r3, [r2, r3]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43da      	mvns	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	029b      	lsls	r3, r3, #10
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f64:	4914      	ldr	r1, [pc, #80]	; (8000fb8 <HAL_GPIO_Init+0x2b8>)
 8000f66:	2284      	movs	r2, #132	; 0x84
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000f6c:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <HAL_GPIO_Init+0x2b8>)
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	58d3      	ldr	r3, [r2, r3]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	43da      	mvns	r2, r3
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	025b      	lsls	r3, r3, #9
 8000f86:	4013      	ands	r3, r2
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f92:	4909      	ldr	r1, [pc, #36]	; (8000fb8 <HAL_GPIO_Init+0x2b8>)
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	40da      	lsrs	r2, r3
 8000fa8:	1e13      	subs	r3, r2, #0
 8000faa:	d000      	beq.n	8000fae <HAL_GPIO_Init+0x2ae>
 8000fac:	e6b0      	b.n	8000d10 <HAL_GPIO_Init+0x10>
  }
}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b006      	add	sp, #24
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40021800 	.word	0x40021800
 8000fbc:	50000400 	.word	0x50000400
 8000fc0:	50000800 	.word	0x50000800
 8000fc4:	50000c00 	.word	0x50000c00

08000fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	0008      	movs	r0, r1
 8000fd2:	0011      	movs	r1, r2
 8000fd4:	1cbb      	adds	r3, r7, #2
 8000fd6:	1c02      	adds	r2, r0, #0
 8000fd8:	801a      	strh	r2, [r3, #0]
 8000fda:	1c7b      	adds	r3, r7, #1
 8000fdc:	1c0a      	adds	r2, r1, #0
 8000fde:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fe0:	1c7b      	adds	r3, r7, #1
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d004      	beq.n	8000ff2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fe8:	1cbb      	adds	r3, r7, #2
 8000fea:	881a      	ldrh	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ff0:	e003      	b.n	8000ffa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ff2:	1cbb      	adds	r3, r7, #2
 8000ff4:	881a      	ldrh	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b002      	add	sp, #8
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	000a      	movs	r2, r1
 800100c:	1cbb      	adds	r3, r7, #2
 800100e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001016:	1cbb      	adds	r3, r7, #2
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	4013      	ands	r3, r2
 800101e:	041a      	lsls	r2, r3, #16
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43db      	mvns	r3, r3
 8001024:	1cb9      	adds	r1, r7, #2
 8001026:	8809      	ldrh	r1, [r1, #0]
 8001028:	400b      	ands	r3, r1
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	619a      	str	r2, [r3, #24]
}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b004      	add	sp, #16
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a19      	ldr	r2, [pc, #100]	; (80010ac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001046:	4013      	ands	r3, r2
 8001048:	0019      	movs	r1, r3
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	430a      	orrs	r2, r1
 8001050:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	429a      	cmp	r2, r3
 800105a:	d11f      	bne.n	800109c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	0013      	movs	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	189b      	adds	r3, r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4912      	ldr	r1, [pc, #72]	; (80010b4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800106a:	0018      	movs	r0, r3
 800106c:	f7ff f84c 	bl	8000108 <__udivsi3>
 8001070:	0003      	movs	r3, r0
 8001072:	3301      	adds	r3, #1
 8001074:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001076:	e008      	b.n	800108a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3b01      	subs	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e001      	b.n	800108a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e009      	b.n	800109e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800108c:	695a      	ldr	r2, [r3, #20]
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	401a      	ands	r2, r3
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	429a      	cmp	r2, r3
 800109a:	d0ed      	beq.n	8001078 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	0018      	movs	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b004      	add	sp, #16
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	40007000 	.word	0x40007000
 80010ac:	fffff9ff 	.word	0xfffff9ff
 80010b0:	20000000 	.word	0x20000000
 80010b4:	000f4240 	.word	0x000f4240

080010b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <LL_RCC_GetAPB1Prescaler+0x14>)
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	23e0      	movs	r3, #224	; 0xe0
 80010c2:	01db      	lsls	r3, r3, #7
 80010c4:	4013      	ands	r3, r2
}
 80010c6:	0018      	movs	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40021000 	.word	0x40021000

080010d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e2fe      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2201      	movs	r2, #1
 80010e8:	4013      	ands	r3, r2
 80010ea:	d100      	bne.n	80010ee <HAL_RCC_OscConfig+0x1e>
 80010ec:	e07c      	b.n	80011e8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ee:	4bc3      	ldr	r3, [pc, #780]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2238      	movs	r2, #56	; 0x38
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010f8:	4bc0      	ldr	r3, [pc, #768]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	2203      	movs	r2, #3
 80010fe:	4013      	ands	r3, r2
 8001100:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	2b10      	cmp	r3, #16
 8001106:	d102      	bne.n	800110e <HAL_RCC_OscConfig+0x3e>
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	2b03      	cmp	r3, #3
 800110c:	d002      	beq.n	8001114 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	2b08      	cmp	r3, #8
 8001112:	d10b      	bne.n	800112c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001114:	4bb9      	ldr	r3, [pc, #740]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	029b      	lsls	r3, r3, #10
 800111c:	4013      	ands	r3, r2
 800111e:	d062      	beq.n	80011e6 <HAL_RCC_OscConfig+0x116>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d15e      	bne.n	80011e6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e2d9      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	025b      	lsls	r3, r3, #9
 8001134:	429a      	cmp	r2, r3
 8001136:	d107      	bne.n	8001148 <HAL_RCC_OscConfig+0x78>
 8001138:	4bb0      	ldr	r3, [pc, #704]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4baf      	ldr	r3, [pc, #700]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 800113e:	2180      	movs	r1, #128	; 0x80
 8001140:	0249      	lsls	r1, r1, #9
 8001142:	430a      	orrs	r2, r1
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	e020      	b.n	800118a <HAL_RCC_OscConfig+0xba>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	23a0      	movs	r3, #160	; 0xa0
 800114e:	02db      	lsls	r3, r3, #11
 8001150:	429a      	cmp	r2, r3
 8001152:	d10e      	bne.n	8001172 <HAL_RCC_OscConfig+0xa2>
 8001154:	4ba9      	ldr	r3, [pc, #676]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4ba8      	ldr	r3, [pc, #672]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 800115a:	2180      	movs	r1, #128	; 0x80
 800115c:	02c9      	lsls	r1, r1, #11
 800115e:	430a      	orrs	r2, r1
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	4ba6      	ldr	r3, [pc, #664]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4ba5      	ldr	r3, [pc, #660]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001168:	2180      	movs	r1, #128	; 0x80
 800116a:	0249      	lsls	r1, r1, #9
 800116c:	430a      	orrs	r2, r1
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	e00b      	b.n	800118a <HAL_RCC_OscConfig+0xba>
 8001172:	4ba2      	ldr	r3, [pc, #648]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4ba1      	ldr	r3, [pc, #644]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001178:	49a1      	ldr	r1, [pc, #644]	; (8001400 <HAL_RCC_OscConfig+0x330>)
 800117a:	400a      	ands	r2, r1
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	4b9f      	ldr	r3, [pc, #636]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4b9e      	ldr	r3, [pc, #632]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001184:	499f      	ldr	r1, [pc, #636]	; (8001404 <HAL_RCC_OscConfig+0x334>)
 8001186:	400a      	ands	r2, r1
 8001188:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d014      	beq.n	80011bc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001192:	f7ff fcfd 	bl	8000b90 <HAL_GetTick>
 8001196:	0003      	movs	r3, r0
 8001198:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800119c:	f7ff fcf8 	bl	8000b90 <HAL_GetTick>
 80011a0:	0002      	movs	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b64      	cmp	r3, #100	; 0x64
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e298      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ae:	4b93      	ldr	r3, [pc, #588]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	029b      	lsls	r3, r3, #10
 80011b6:	4013      	ands	r3, r2
 80011b8:	d0f0      	beq.n	800119c <HAL_RCC_OscConfig+0xcc>
 80011ba:	e015      	b.n	80011e8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011bc:	f7ff fce8 	bl	8000b90 <HAL_GetTick>
 80011c0:	0003      	movs	r3, r0
 80011c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c6:	f7ff fce3 	bl	8000b90 <HAL_GetTick>
 80011ca:	0002      	movs	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b64      	cmp	r3, #100	; 0x64
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e283      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011d8:	4b88      	ldr	r3, [pc, #544]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	029b      	lsls	r3, r3, #10
 80011e0:	4013      	ands	r3, r2
 80011e2:	d1f0      	bne.n	80011c6 <HAL_RCC_OscConfig+0xf6>
 80011e4:	e000      	b.n	80011e8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2202      	movs	r2, #2
 80011ee:	4013      	ands	r3, r2
 80011f0:	d100      	bne.n	80011f4 <HAL_RCC_OscConfig+0x124>
 80011f2:	e099      	b.n	8001328 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011f4:	4b81      	ldr	r3, [pc, #516]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	2238      	movs	r2, #56	; 0x38
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011fe:	4b7f      	ldr	r3, [pc, #508]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	2203      	movs	r2, #3
 8001204:	4013      	ands	r3, r2
 8001206:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2b10      	cmp	r3, #16
 800120c:	d102      	bne.n	8001214 <HAL_RCC_OscConfig+0x144>
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d002      	beq.n	800121a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d135      	bne.n	8001286 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800121a:	4b78      	ldr	r3, [pc, #480]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4013      	ands	r3, r2
 8001224:	d005      	beq.n	8001232 <HAL_RCC_OscConfig+0x162>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e256      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001232:	4b72      	ldr	r3, [pc, #456]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4a74      	ldr	r2, [pc, #464]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 8001238:	4013      	ands	r3, r2
 800123a:	0019      	movs	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	021a      	lsls	r2, r3, #8
 8001242:	4b6e      	ldr	r3, [pc, #440]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001244:	430a      	orrs	r2, r1
 8001246:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d112      	bne.n	8001274 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800124e:	4b6b      	ldr	r3, [pc, #428]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a6e      	ldr	r2, [pc, #440]	; (800140c <HAL_RCC_OscConfig+0x33c>)
 8001254:	4013      	ands	r3, r2
 8001256:	0019      	movs	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	4b67      	ldr	r3, [pc, #412]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 800125e:	430a      	orrs	r2, r1
 8001260:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001262:	4b66      	ldr	r3, [pc, #408]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	0adb      	lsrs	r3, r3, #11
 8001268:	2207      	movs	r2, #7
 800126a:	4013      	ands	r3, r2
 800126c:	4a68      	ldr	r2, [pc, #416]	; (8001410 <HAL_RCC_OscConfig+0x340>)
 800126e:	40da      	lsrs	r2, r3
 8001270:	4b68      	ldr	r3, [pc, #416]	; (8001414 <HAL_RCC_OscConfig+0x344>)
 8001272:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001274:	4b68      	ldr	r3, [pc, #416]	; (8001418 <HAL_RCC_OscConfig+0x348>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	0018      	movs	r0, r3
 800127a:	f7ff fae3 	bl	8000844 <HAL_InitTick>
 800127e:	1e03      	subs	r3, r0, #0
 8001280:	d051      	beq.n	8001326 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e22c      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d030      	beq.n	80012f0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800128e:	4b5b      	ldr	r3, [pc, #364]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a5e      	ldr	r2, [pc, #376]	; (800140c <HAL_RCC_OscConfig+0x33c>)
 8001294:	4013      	ands	r3, r2
 8001296:	0019      	movs	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691a      	ldr	r2, [r3, #16]
 800129c:	4b57      	ldr	r3, [pc, #348]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80012a2:	4b56      	ldr	r3, [pc, #344]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b55      	ldr	r3, [pc, #340]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	0049      	lsls	r1, r1, #1
 80012ac:	430a      	orrs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b0:	f7ff fc6e 	bl	8000b90 <HAL_GetTick>
 80012b4:	0003      	movs	r3, r0
 80012b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ba:	f7ff fc69 	bl	8000b90 <HAL_GetTick>
 80012be:	0002      	movs	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e209      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012cc:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4013      	ands	r3, r2
 80012d6:	d0f0      	beq.n	80012ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d8:	4b48      	ldr	r3, [pc, #288]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	4a4a      	ldr	r2, [pc, #296]	; (8001408 <HAL_RCC_OscConfig+0x338>)
 80012de:	4013      	ands	r3, r2
 80012e0:	0019      	movs	r1, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	021a      	lsls	r2, r3, #8
 80012e8:	4b44      	ldr	r3, [pc, #272]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 80012ea:	430a      	orrs	r2, r1
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	e01b      	b.n	8001328 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80012f0:	4b42      	ldr	r3, [pc, #264]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b41      	ldr	r3, [pc, #260]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 80012f6:	4949      	ldr	r1, [pc, #292]	; (800141c <HAL_RCC_OscConfig+0x34c>)
 80012f8:	400a      	ands	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff fc48 	bl	8000b90 <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001306:	f7ff fc43 	bl	8000b90 <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e1e3      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001318:	4b38      	ldr	r3, [pc, #224]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	4013      	ands	r3, r2
 8001322:	d1f0      	bne.n	8001306 <HAL_RCC_OscConfig+0x236>
 8001324:	e000      	b.n	8001328 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001326:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2208      	movs	r2, #8
 800132e:	4013      	ands	r3, r2
 8001330:	d047      	beq.n	80013c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001332:	4b32      	ldr	r3, [pc, #200]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2238      	movs	r2, #56	; 0x38
 8001338:	4013      	ands	r3, r2
 800133a:	2b18      	cmp	r3, #24
 800133c:	d10a      	bne.n	8001354 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800133e:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001342:	2202      	movs	r2, #2
 8001344:	4013      	ands	r3, r2
 8001346:	d03c      	beq.n	80013c2 <HAL_RCC_OscConfig+0x2f2>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d138      	bne.n	80013c2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e1c5      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d019      	beq.n	8001390 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800135c:	4b27      	ldr	r3, [pc, #156]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 800135e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001360:	4b26      	ldr	r3, [pc, #152]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001362:	2101      	movs	r1, #1
 8001364:	430a      	orrs	r2, r1
 8001366:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fc12 	bl	8000b90 <HAL_GetTick>
 800136c:	0003      	movs	r3, r0
 800136e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001372:	f7ff fc0d 	bl	8000b90 <HAL_GetTick>
 8001376:	0002      	movs	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e1ad      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001388:	2202      	movs	r2, #2
 800138a:	4013      	ands	r3, r2
 800138c:	d0f1      	beq.n	8001372 <HAL_RCC_OscConfig+0x2a2>
 800138e:	e018      	b.n	80013c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001392:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 8001396:	2101      	movs	r1, #1
 8001398:	438a      	bics	r2, r1
 800139a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff fbf8 	bl	8000b90 <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a6:	f7ff fbf3 	bl	8000b90 <HAL_GetTick>
 80013aa:	0002      	movs	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e193      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 80013ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013bc:	2202      	movs	r2, #2
 80013be:	4013      	ands	r3, r2
 80013c0:	d1f1      	bne.n	80013a6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2204      	movs	r2, #4
 80013c8:	4013      	ands	r3, r2
 80013ca:	d100      	bne.n	80013ce <HAL_RCC_OscConfig+0x2fe>
 80013cc:	e0c6      	b.n	800155c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ce:	231f      	movs	r3, #31
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2238      	movs	r2, #56	; 0x38
 80013dc:	4013      	ands	r3, r2
 80013de:	2b20      	cmp	r3, #32
 80013e0:	d11e      	bne.n	8001420 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_RCC_OscConfig+0x32c>)
 80013e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e6:	2202      	movs	r2, #2
 80013e8:	4013      	ands	r3, r2
 80013ea:	d100      	bne.n	80013ee <HAL_RCC_OscConfig+0x31e>
 80013ec:	e0b6      	b.n	800155c <HAL_RCC_OscConfig+0x48c>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d000      	beq.n	80013f8 <HAL_RCC_OscConfig+0x328>
 80013f6:	e0b1      	b.n	800155c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e171      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
 80013fc:	40021000 	.word	0x40021000
 8001400:	fffeffff 	.word	0xfffeffff
 8001404:	fffbffff 	.word	0xfffbffff
 8001408:	ffff80ff 	.word	0xffff80ff
 800140c:	ffffc7ff 	.word	0xffffc7ff
 8001410:	00f42400 	.word	0x00f42400
 8001414:	20000000 	.word	0x20000000
 8001418:	20000004 	.word	0x20000004
 800141c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001420:	4bb1      	ldr	r3, [pc, #708]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 8001422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	055b      	lsls	r3, r3, #21
 8001428:	4013      	ands	r3, r2
 800142a:	d101      	bne.n	8001430 <HAL_RCC_OscConfig+0x360>
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <HAL_RCC_OscConfig+0x362>
 8001430:	2300      	movs	r3, #0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d011      	beq.n	800145a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4bac      	ldr	r3, [pc, #688]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 8001438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800143a:	4bab      	ldr	r3, [pc, #684]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	0549      	lsls	r1, r1, #21
 8001440:	430a      	orrs	r2, r1
 8001442:	63da      	str	r2, [r3, #60]	; 0x3c
 8001444:	4ba8      	ldr	r3, [pc, #672]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 8001446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	055b      	lsls	r3, r3, #21
 800144c:	4013      	ands	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001452:	231f      	movs	r3, #31
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800145a:	4ba4      	ldr	r3, [pc, #656]	; (80016ec <HAL_RCC_OscConfig+0x61c>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4013      	ands	r3, r2
 8001464:	d11a      	bne.n	800149c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001466:	4ba1      	ldr	r3, [pc, #644]	; (80016ec <HAL_RCC_OscConfig+0x61c>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4ba0      	ldr	r3, [pc, #640]	; (80016ec <HAL_RCC_OscConfig+0x61c>)
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	0049      	lsls	r1, r1, #1
 8001470:	430a      	orrs	r2, r1
 8001472:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001474:	f7ff fb8c 	bl	8000b90 <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800147e:	f7ff fb87 	bl	8000b90 <HAL_GetTick>
 8001482:	0002      	movs	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e127      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001490:	4b96      	ldr	r3, [pc, #600]	; (80016ec <HAL_RCC_OscConfig+0x61c>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4013      	ands	r3, r2
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d106      	bne.n	80014b2 <HAL_RCC_OscConfig+0x3e2>
 80014a4:	4b90      	ldr	r3, [pc, #576]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 80014a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014a8:	4b8f      	ldr	r3, [pc, #572]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 80014aa:	2101      	movs	r1, #1
 80014ac:	430a      	orrs	r2, r1
 80014ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80014b0:	e01c      	b.n	80014ec <HAL_RCC_OscConfig+0x41c>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b05      	cmp	r3, #5
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x404>
 80014ba:	4b8b      	ldr	r3, [pc, #556]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 80014bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014be:	4b8a      	ldr	r3, [pc, #552]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 80014c0:	2104      	movs	r1, #4
 80014c2:	430a      	orrs	r2, r1
 80014c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80014c6:	4b88      	ldr	r3, [pc, #544]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 80014c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014ca:	4b87      	ldr	r3, [pc, #540]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 80014cc:	2101      	movs	r1, #1
 80014ce:	430a      	orrs	r2, r1
 80014d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80014d2:	e00b      	b.n	80014ec <HAL_RCC_OscConfig+0x41c>
 80014d4:	4b84      	ldr	r3, [pc, #528]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 80014d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014d8:	4b83      	ldr	r3, [pc, #524]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 80014da:	2101      	movs	r1, #1
 80014dc:	438a      	bics	r2, r1
 80014de:	65da      	str	r2, [r3, #92]	; 0x5c
 80014e0:	4b81      	ldr	r3, [pc, #516]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 80014e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014e4:	4b80      	ldr	r3, [pc, #512]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 80014e6:	2104      	movs	r1, #4
 80014e8:	438a      	bics	r2, r1
 80014ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d014      	beq.n	800151e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fb4c 	bl	8000b90 <HAL_GetTick>
 80014f8:	0003      	movs	r3, r0
 80014fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014fc:	e009      	b.n	8001512 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f7ff fb47 	bl	8000b90 <HAL_GetTick>
 8001502:	0002      	movs	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	4a79      	ldr	r2, [pc, #484]	; (80016f0 <HAL_RCC_OscConfig+0x620>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e0e6      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001512:	4b75      	ldr	r3, [pc, #468]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 8001514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001516:	2202      	movs	r2, #2
 8001518:	4013      	ands	r3, r2
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x42e>
 800151c:	e013      	b.n	8001546 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151e:	f7ff fb37 	bl	8000b90 <HAL_GetTick>
 8001522:	0003      	movs	r3, r0
 8001524:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001526:	e009      	b.n	800153c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001528:	f7ff fb32 	bl	8000b90 <HAL_GetTick>
 800152c:	0002      	movs	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	4a6f      	ldr	r2, [pc, #444]	; (80016f0 <HAL_RCC_OscConfig+0x620>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e0d1      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800153c:	4b6a      	ldr	r3, [pc, #424]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 800153e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001540:	2202      	movs	r2, #2
 8001542:	4013      	ands	r3, r2
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001546:	231f      	movs	r3, #31
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d105      	bne.n	800155c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001550:	4b65      	ldr	r3, [pc, #404]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 8001552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001554:	4b64      	ldr	r3, [pc, #400]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 8001556:	4967      	ldr	r1, [pc, #412]	; (80016f4 <HAL_RCC_OscConfig+0x624>)
 8001558:	400a      	ands	r2, r1
 800155a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d100      	bne.n	8001566 <HAL_RCC_OscConfig+0x496>
 8001564:	e0bb      	b.n	80016de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001566:	4b60      	ldr	r3, [pc, #384]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2238      	movs	r2, #56	; 0x38
 800156c:	4013      	ands	r3, r2
 800156e:	2b10      	cmp	r3, #16
 8001570:	d100      	bne.n	8001574 <HAL_RCC_OscConfig+0x4a4>
 8001572:	e07b      	b.n	800166c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d156      	bne.n	800162a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157c:	4b5a      	ldr	r3, [pc, #360]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b59      	ldr	r3, [pc, #356]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 8001582:	495d      	ldr	r1, [pc, #372]	; (80016f8 <HAL_RCC_OscConfig+0x628>)
 8001584:	400a      	ands	r2, r1
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fb02 	bl	8000b90 <HAL_GetTick>
 800158c:	0003      	movs	r3, r0
 800158e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001592:	f7ff fafd 	bl	8000b90 <HAL_GetTick>
 8001596:	0002      	movs	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e09d      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a4:	4b50      	ldr	r3, [pc, #320]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	049b      	lsls	r3, r3, #18
 80015ac:	4013      	ands	r3, r2
 80015ae:	d1f0      	bne.n	8001592 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b0:	4b4d      	ldr	r3, [pc, #308]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	4a51      	ldr	r2, [pc, #324]	; (80016fc <HAL_RCC_OscConfig+0x62c>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	0019      	movs	r1, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1a      	ldr	r2, [r3, #32]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015dc:	431a      	orrs	r2, r3
 80015de:	4b42      	ldr	r3, [pc, #264]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 80015e0:	430a      	orrs	r2, r1
 80015e2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e4:	4b40      	ldr	r3, [pc, #256]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 80015ea:	2180      	movs	r1, #128	; 0x80
 80015ec:	0449      	lsls	r1, r1, #17
 80015ee:	430a      	orrs	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80015f2:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	4b3c      	ldr	r3, [pc, #240]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 80015f8:	2180      	movs	r1, #128	; 0x80
 80015fa:	0549      	lsls	r1, r1, #21
 80015fc:	430a      	orrs	r2, r1
 80015fe:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001600:	f7ff fac6 	bl	8000b90 <HAL_GetTick>
 8001604:	0003      	movs	r3, r0
 8001606:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160a:	f7ff fac1 	bl	8000b90 <HAL_GetTick>
 800160e:	0002      	movs	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e061      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800161c:	4b32      	ldr	r3, [pc, #200]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	049b      	lsls	r3, r3, #18
 8001624:	4013      	ands	r3, r2
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x53a>
 8001628:	e059      	b.n	80016de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162a:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4b2e      	ldr	r3, [pc, #184]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 8001630:	4931      	ldr	r1, [pc, #196]	; (80016f8 <HAL_RCC_OscConfig+0x628>)
 8001632:	400a      	ands	r2, r1
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff faab 	bl	8000b90 <HAL_GetTick>
 800163a:	0003      	movs	r3, r0
 800163c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff faa6 	bl	8000b90 <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e046      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001652:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	049b      	lsls	r3, r3, #18
 800165a:	4013      	ands	r3, r2
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 8001664:	4926      	ldr	r1, [pc, #152]	; (8001700 <HAL_RCC_OscConfig+0x630>)
 8001666:	400a      	ands	r2, r1
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	e038      	b.n	80016de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e033      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_RCC_OscConfig+0x618>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2203      	movs	r2, #3
 8001682:	401a      	ands	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	429a      	cmp	r2, r3
 800168a:	d126      	bne.n	80016da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2270      	movs	r2, #112	; 0x70
 8001690:	401a      	ands	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d11f      	bne.n	80016da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	23fe      	movs	r3, #254	; 0xfe
 800169e:	01db      	lsls	r3, r3, #7
 80016a0:	401a      	ands	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d116      	bne.n	80016da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	23f8      	movs	r3, #248	; 0xf8
 80016b0:	039b      	lsls	r3, r3, #14
 80016b2:	401a      	ands	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d10e      	bne.n	80016da <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	23e0      	movs	r3, #224	; 0xe0
 80016c0:	051b      	lsls	r3, r3, #20
 80016c2:	401a      	ands	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d106      	bne.n	80016da <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	0f5b      	lsrs	r3, r3, #29
 80016d0:	075a      	lsls	r2, r3, #29
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d001      	beq.n	80016de <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	0018      	movs	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b008      	add	sp, #32
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40007000 	.word	0x40007000
 80016f0:	00001388 	.word	0x00001388
 80016f4:	efffffff 	.word	0xefffffff
 80016f8:	feffffff 	.word	0xfeffffff
 80016fc:	11c1808c 	.word	0x11c1808c
 8001700:	eefefffc 	.word	0xeefefffc

08001704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e0e9      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001718:	4b76      	ldr	r3, [pc, #472]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2207      	movs	r2, #7
 800171e:	4013      	ands	r3, r2
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d91e      	bls.n	8001764 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001726:	4b73      	ldr	r3, [pc, #460]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2207      	movs	r2, #7
 800172c:	4393      	bics	r3, r2
 800172e:	0019      	movs	r1, r3
 8001730:	4b70      	ldr	r3, [pc, #448]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001738:	f7ff fa2a 	bl	8000b90 <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001740:	e009      	b.n	8001756 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001742:	f7ff fa25 	bl	8000b90 <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	4a6a      	ldr	r2, [pc, #424]	; (80018f8 <HAL_RCC_ClockConfig+0x1f4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e0ca      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001756:	4b67      	ldr	r3, [pc, #412]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2207      	movs	r2, #7
 800175c:	4013      	ands	r3, r2
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d1ee      	bne.n	8001742 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2202      	movs	r2, #2
 800176a:	4013      	ands	r3, r2
 800176c:	d015      	beq.n	800179a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2204      	movs	r2, #4
 8001774:	4013      	ands	r3, r2
 8001776:	d006      	beq.n	8001786 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001778:	4b60      	ldr	r3, [pc, #384]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	4b5f      	ldr	r3, [pc, #380]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 800177e:	21e0      	movs	r1, #224	; 0xe0
 8001780:	01c9      	lsls	r1, r1, #7
 8001782:	430a      	orrs	r2, r1
 8001784:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001786:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	4a5d      	ldr	r2, [pc, #372]	; (8001900 <HAL_RCC_ClockConfig+0x1fc>)
 800178c:	4013      	ands	r3, r2
 800178e:	0019      	movs	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 8001796:	430a      	orrs	r2, r1
 8001798:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	4013      	ands	r3, r2
 80017a2:	d057      	beq.n	8001854 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d107      	bne.n	80017bc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	029b      	lsls	r3, r3, #10
 80017b4:	4013      	ands	r3, r2
 80017b6:	d12b      	bne.n	8001810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e097      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c4:	4b4d      	ldr	r3, [pc, #308]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	049b      	lsls	r3, r3, #18
 80017cc:	4013      	ands	r3, r2
 80017ce:	d11f      	bne.n	8001810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e08b      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d107      	bne.n	80017ec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017dc:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4013      	ands	r3, r2
 80017e6:	d113      	bne.n	8001810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e07f      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017f4:	4b41      	ldr	r3, [pc, #260]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80017f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f8:	2202      	movs	r2, #2
 80017fa:	4013      	ands	r3, r2
 80017fc:	d108      	bne.n	8001810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e074      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001802:	4b3e      	ldr	r3, [pc, #248]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 8001804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001806:	2202      	movs	r2, #2
 8001808:	4013      	ands	r3, r2
 800180a:	d101      	bne.n	8001810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e06d      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001810:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2207      	movs	r2, #7
 8001816:	4393      	bics	r3, r2
 8001818:	0019      	movs	r1, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	4b37      	ldr	r3, [pc, #220]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 8001820:	430a      	orrs	r2, r1
 8001822:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001824:	f7ff f9b4 	bl	8000b90 <HAL_GetTick>
 8001828:	0003      	movs	r3, r0
 800182a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182c:	e009      	b.n	8001842 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182e:	f7ff f9af 	bl	8000b90 <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	4a2f      	ldr	r2, [pc, #188]	; (80018f8 <HAL_RCC_ClockConfig+0x1f4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e054      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2238      	movs	r2, #56	; 0x38
 8001848:	401a      	ands	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	429a      	cmp	r2, r3
 8001852:	d1ec      	bne.n	800182e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001854:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2207      	movs	r2, #7
 800185a:	4013      	ands	r3, r2
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d21e      	bcs.n	80018a0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2207      	movs	r2, #7
 8001868:	4393      	bics	r3, r2
 800186a:	0019      	movs	r1, r3
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001874:	f7ff f98c 	bl	8000b90 <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800187c:	e009      	b.n	8001892 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187e:	f7ff f987 	bl	8000b90 <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <HAL_RCC_ClockConfig+0x1f4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e02c      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2207      	movs	r2, #7
 8001898:	4013      	ands	r3, r2
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d1ee      	bne.n	800187e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2204      	movs	r2, #4
 80018a6:	4013      	ands	r3, r2
 80018a8:	d009      	beq.n	80018be <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	4a15      	ldr	r2, [pc, #84]	; (8001904 <HAL_RCC_ClockConfig+0x200>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	0019      	movs	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80018ba:	430a      	orrs	r2, r1
 80018bc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018be:	f000 f829 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 80018c2:	0001      	movs	r1, r0
 80018c4:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	220f      	movs	r2, #15
 80018cc:	401a      	ands	r2, r3
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_RCC_ClockConfig+0x204>)
 80018d0:	0092      	lsls	r2, r2, #2
 80018d2:	58d3      	ldr	r3, [r2, r3]
 80018d4:	221f      	movs	r2, #31
 80018d6:	4013      	ands	r3, r2
 80018d8:	000a      	movs	r2, r1
 80018da:	40da      	lsrs	r2, r3
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_ClockConfig+0x208>)
 80018de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_RCC_ClockConfig+0x20c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0018      	movs	r0, r3
 80018e6:	f7fe ffad 	bl	8000844 <HAL_InitTick>
 80018ea:	0003      	movs	r3, r0
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b004      	add	sp, #16
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40022000 	.word	0x40022000
 80018f8:	00001388 	.word	0x00001388
 80018fc:	40021000 	.word	0x40021000
 8001900:	fffff0ff 	.word	0xfffff0ff
 8001904:	ffff8fff 	.word	0xffff8fff
 8001908:	08004fc4 	.word	0x08004fc4
 800190c:	20000000 	.word	0x20000000
 8001910:	20000004 	.word	0x20000004

08001914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800191a:	4b3c      	ldr	r3, [pc, #240]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2238      	movs	r2, #56	; 0x38
 8001920:	4013      	ands	r3, r2
 8001922:	d10f      	bne.n	8001944 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0adb      	lsrs	r3, r3, #11
 800192a:	2207      	movs	r2, #7
 800192c:	4013      	ands	r3, r2
 800192e:	2201      	movs	r2, #1
 8001930:	409a      	lsls	r2, r3
 8001932:	0013      	movs	r3, r2
 8001934:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001936:	6839      	ldr	r1, [r7, #0]
 8001938:	4835      	ldr	r0, [pc, #212]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xfc>)
 800193a:	f7fe fbe5 	bl	8000108 <__udivsi3>
 800193e:	0003      	movs	r3, r0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	e05d      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001944:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2238      	movs	r2, #56	; 0x38
 800194a:	4013      	ands	r3, r2
 800194c:	2b08      	cmp	r3, #8
 800194e:	d102      	bne.n	8001956 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001950:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x100>)
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	e054      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001956:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2238      	movs	r2, #56	; 0x38
 800195c:	4013      	ands	r3, r2
 800195e:	2b10      	cmp	r3, #16
 8001960:	d138      	bne.n	80019d4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001962:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2203      	movs	r2, #3
 8001968:	4013      	ands	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800196c:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	2207      	movs	r2, #7
 8001974:	4013      	ands	r3, r2
 8001976:	3301      	adds	r3, #1
 8001978:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d10d      	bne.n	800199c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	4824      	ldr	r0, [pc, #144]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x100>)
 8001984:	f7fe fbc0 	bl	8000108 <__udivsi3>
 8001988:	0003      	movs	r3, r0
 800198a:	0019      	movs	r1, r3
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	227f      	movs	r2, #127	; 0x7f
 8001994:	4013      	ands	r3, r2
 8001996:	434b      	muls	r3, r1
 8001998:	617b      	str	r3, [r7, #20]
        break;
 800199a:	e00d      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	481c      	ldr	r0, [pc, #112]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019a0:	f7fe fbb2 	bl	8000108 <__udivsi3>
 80019a4:	0003      	movs	r3, r0
 80019a6:	0019      	movs	r1, r3
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	227f      	movs	r2, #127	; 0x7f
 80019b0:	4013      	ands	r3, r2
 80019b2:	434b      	muls	r3, r1
 80019b4:	617b      	str	r3, [r7, #20]
        break;
 80019b6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0f5b      	lsrs	r3, r3, #29
 80019be:	2207      	movs	r2, #7
 80019c0:	4013      	ands	r3, r2
 80019c2:	3301      	adds	r3, #1
 80019c4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	6978      	ldr	r0, [r7, #20]
 80019ca:	f7fe fb9d 	bl	8000108 <__udivsi3>
 80019ce:	0003      	movs	r3, r0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	e015      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019d4:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2238      	movs	r2, #56	; 0x38
 80019da:	4013      	ands	r3, r2
 80019dc:	2b20      	cmp	r3, #32
 80019de:	d103      	bne.n	80019e8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	e00b      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2238      	movs	r2, #56	; 0x38
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b18      	cmp	r3, #24
 80019f2:	d103      	bne.n	80019fc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80019f4:	23fa      	movs	r3, #250	; 0xfa
 80019f6:	01db      	lsls	r3, r3, #7
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	e001      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a00:	693b      	ldr	r3, [r7, #16]
}
 8001a02:	0018      	movs	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b006      	add	sp, #24
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	00f42400 	.word	0x00f42400
 8001a14:	007a1200 	.word	0x007a1200

08001a18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a1c:	4b02      	ldr	r3, [pc, #8]	; (8001a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	20000000 	.word	0x20000000

08001a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a2c:	b5b0      	push	{r4, r5, r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a30:	f7ff fff2 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a34:	0004      	movs	r4, r0
 8001a36:	f7ff fb3f 	bl	80010b8 <LL_RCC_GetAPB1Prescaler>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	0b1a      	lsrs	r2, r3, #12
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	58d3      	ldr	r3, [r2, r3]
 8001a44:	221f      	movs	r2, #31
 8001a46:	4013      	ands	r3, r2
 8001a48:	40dc      	lsrs	r4, r3
 8001a4a:	0023      	movs	r3, r4
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bdb0      	pop	{r4, r5, r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	08005004 	.word	0x08005004

08001a58 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2207      	movs	r2, #7
 8001a66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_RCC_GetClockConfig+0x4c>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	401a      	ands	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_GetClockConfig+0x4c>)
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	23f0      	movs	r3, #240	; 0xf0
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_RCC_GetClockConfig+0x4c>)
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	23e0      	movs	r3, #224	; 0xe0
 8001a88:	01db      	lsls	r3, r3, #7
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetClockConfig+0x50>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2207      	movs	r2, #7
 8001a96:	401a      	ands	r2, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	601a      	str	r2, [r3, #0]
}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40022000 	.word	0x40022000

08001aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ab4:	2313      	movs	r3, #19
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001abc:	2312      	movs	r3, #18
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	029b      	lsls	r3, r3, #10
 8001acc:	4013      	ands	r3, r2
 8001ace:	d100      	bne.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ad0:	e0a3      	b.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad2:	2011      	movs	r0, #17
 8001ad4:	183b      	adds	r3, r7, r0
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ada:	4bc3      	ldr	r3, [pc, #780]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	055b      	lsls	r3, r3, #21
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d110      	bne.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	4bc0      	ldr	r3, [pc, #768]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aea:	4bbf      	ldr	r3, [pc, #764]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	0549      	lsls	r1, r1, #21
 8001af0:	430a      	orrs	r2, r1
 8001af2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001af4:	4bbc      	ldr	r3, [pc, #752]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	055b      	lsls	r3, r3, #21
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b02:	183b      	adds	r3, r7, r0
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b08:	4bb8      	ldr	r3, [pc, #736]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4bb7      	ldr	r3, [pc, #732]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b0e:	2180      	movs	r1, #128	; 0x80
 8001b10:	0049      	lsls	r1, r1, #1
 8001b12:	430a      	orrs	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b16:	f7ff f83b 	bl	8000b90 <HAL_GetTick>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b20:	f7ff f836 	bl	8000b90 <HAL_GetTick>
 8001b24:	0002      	movs	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d904      	bls.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001b2e:	2313      	movs	r3, #19
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	2203      	movs	r2, #3
 8001b34:	701a      	strb	r2, [r3, #0]
        break;
 8001b36:	e005      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b38:	4bac      	ldr	r3, [pc, #688]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4013      	ands	r3, r2
 8001b42:	d0ed      	beq.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001b44:	2313      	movs	r3, #19
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d154      	bne.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b4e:	4ba6      	ldr	r3, [pc, #664]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b52:	23c0      	movs	r3, #192	; 0xc0
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4013      	ands	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d019      	beq.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d014      	beq.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b6a:	4b9f      	ldr	r3, [pc, #636]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6e:	4aa0      	ldr	r2, [pc, #640]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b74:	4b9c      	ldr	r3, [pc, #624]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b78:	4b9b      	ldr	r3, [pc, #620]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b7a:	2180      	movs	r1, #128	; 0x80
 8001b7c:	0249      	lsls	r1, r1, #9
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b82:	4b99      	ldr	r3, [pc, #612]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b86:	4b98      	ldr	r3, [pc, #608]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b88:	499a      	ldr	r1, [pc, #616]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b8e:	4b96      	ldr	r3, [pc, #600]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2201      	movs	r2, #1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d016      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7fe fff8 	bl	8000b90 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba4:	e00c      	b.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7fe fff3 	bl	8000b90 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	4a91      	ldr	r2, [pc, #580]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d904      	bls.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001bb6:	2313      	movs	r3, #19
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	2203      	movs	r2, #3
 8001bbc:	701a      	strb	r2, [r3, #0]
            break;
 8001bbe:	e004      	b.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc0:	4b89      	ldr	r3, [pc, #548]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d0ed      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001bca:	2313      	movs	r3, #19
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10a      	bne.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bd4:	4b84      	ldr	r3, [pc, #528]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd8:	4a85      	ldr	r2, [pc, #532]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	0019      	movs	r1, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001be2:	4b81      	ldr	r3, [pc, #516]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001be4:	430a      	orrs	r2, r1
 8001be6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001be8:	e00c      	b.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001bea:	2312      	movs	r3, #18
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	2213      	movs	r2, #19
 8001bf0:	18ba      	adds	r2, r7, r2
 8001bf2:	7812      	ldrb	r2, [r2, #0]
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	e005      	b.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001bf8:	2312      	movs	r3, #18
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	2213      	movs	r2, #19
 8001bfe:	18ba      	adds	r2, r7, r2
 8001c00:	7812      	ldrb	r2, [r2, #0]
 8001c02:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c04:	2311      	movs	r3, #17
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d105      	bne.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0e:	4b76      	ldr	r3, [pc, #472]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c12:	4b75      	ldr	r3, [pc, #468]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c14:	4979      	ldr	r1, [pc, #484]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001c16:	400a      	ands	r2, r1
 8001c18:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4013      	ands	r3, r2
 8001c22:	d009      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c24:	4b70      	ldr	r3, [pc, #448]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c28:	2203      	movs	r2, #3
 8001c2a:	4393      	bics	r3, r2
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	4b6d      	ldr	r3, [pc, #436]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c34:	430a      	orrs	r2, r1
 8001c36:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d009      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c42:	4b69      	ldr	r3, [pc, #420]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c46:	220c      	movs	r2, #12
 8001c48:	4393      	bics	r3, r2
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	4b65      	ldr	r3, [pc, #404]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c52:	430a      	orrs	r2, r1
 8001c54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d009      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c60:	4b61      	ldr	r3, [pc, #388]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c64:	4a66      	ldr	r2, [pc, #408]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	0019      	movs	r1, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	4b5e      	ldr	r3, [pc, #376]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c70:	430a      	orrs	r2, r1
 8001c72:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d009      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c80:	4b59      	ldr	r3, [pc, #356]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c84:	4a5f      	ldr	r2, [pc, #380]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	0019      	movs	r1, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699a      	ldr	r2, [r3, #24]
 8001c8e:	4b56      	ldr	r3, [pc, #344]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c90:	430a      	orrs	r2, r1
 8001c92:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d009      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ca0:	4b51      	ldr	r3, [pc, #324]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca4:	4a58      	ldr	r2, [pc, #352]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	0019      	movs	r1, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69da      	ldr	r2, [r3, #28]
 8001cae:	4b4e      	ldr	r3, [pc, #312]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d009      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cbe:	4b4a      	ldr	r3, [pc, #296]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc2:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	0019      	movs	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	4b46      	ldr	r3, [pc, #280]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	01db      	lsls	r3, r3, #7
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d015      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cde:	4b42      	ldr	r3, [pc, #264]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	0899      	lsrs	r1, r3, #2
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1a      	ldr	r2, [r3, #32]
 8001cea:	4b3f      	ldr	r3, [pc, #252]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cec:	430a      	orrs	r2, r1
 8001cee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1a      	ldr	r2, [r3, #32]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	05db      	lsls	r3, r3, #23
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001cfc:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	4b39      	ldr	r3, [pc, #228]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d02:	2180      	movs	r1, #128	; 0x80
 8001d04:	0249      	lsls	r1, r1, #9
 8001d06:	430a      	orrs	r2, r1
 8001d08:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	031b      	lsls	r3, r3, #12
 8001d12:	4013      	ands	r3, r2
 8001d14:	d009      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d16:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1a:	2240      	movs	r2, #64	; 0x40
 8001d1c:	4393      	bics	r3, r2
 8001d1e:	0019      	movs	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d24:	4b30      	ldr	r3, [pc, #192]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d26:	430a      	orrs	r2, r1
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	039b      	lsls	r3, r3, #14
 8001d32:	4013      	ands	r3, r2
 8001d34:	d016      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001d36:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3a:	4a35      	ldr	r2, [pc, #212]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	0019      	movs	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d44:	4b28      	ldr	r3, [pc, #160]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d46:	430a      	orrs	r2, r1
 8001d48:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	03db      	lsls	r3, r3, #15
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d106      	bne.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001d56:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d5c:	2180      	movs	r1, #128	; 0x80
 8001d5e:	0449      	lsls	r1, r1, #17
 8001d60:	430a      	orrs	r2, r1
 8001d62:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	03db      	lsls	r3, r3, #15
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d016      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001d70:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d74:	4a27      	ldr	r2, [pc, #156]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	0019      	movs	r1, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d80:	430a      	orrs	r2, r1
 8001d82:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	045b      	lsls	r3, r3, #17
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d106      	bne.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001d90:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d96:	2180      	movs	r1, #128	; 0x80
 8001d98:	0449      	lsls	r1, r1, #17
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	4013      	ands	r3, r2
 8001da8:	d016      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	0019      	movs	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695a      	ldr	r2, [r3, #20]
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	01db      	lsls	r3, r3, #7
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d106      	bne.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dd0:	2180      	movs	r1, #128	; 0x80
 8001dd2:	0249      	lsls	r1, r1, #9
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001dd8:	2312      	movs	r3, #18
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	781b      	ldrb	r3, [r3, #0]
}
 8001dde:	0018      	movs	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b006      	add	sp, #24
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40007000 	.word	0x40007000
 8001df0:	fffffcff 	.word	0xfffffcff
 8001df4:	fffeffff 	.word	0xfffeffff
 8001df8:	00001388 	.word	0x00001388
 8001dfc:	efffffff 	.word	0xefffffff
 8001e00:	fffff3ff 	.word	0xfffff3ff
 8001e04:	fff3ffff 	.word	0xfff3ffff
 8001e08:	ffcfffff 	.word	0xffcfffff
 8001e0c:	ffffcfff 	.word	0xffffcfff
 8001e10:	ffbfffff 	.word	0xffbfffff
 8001e14:	feffffff 	.word	0xfeffffff
 8001e18:	ffff3fff 	.word	0xffff3fff

08001e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e04a      	b.n	8001ec4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	223d      	movs	r2, #61	; 0x3d
 8001e32:	5c9b      	ldrb	r3, [r3, r2]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d107      	bne.n	8001e4a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	223c      	movs	r2, #60	; 0x3c
 8001e3e:	2100      	movs	r1, #0
 8001e40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	0018      	movs	r0, r3
 8001e46:	f000 f841 	bl	8001ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	223d      	movs	r2, #61	; 0x3d
 8001e4e:	2102      	movs	r1, #2
 8001e50:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	0010      	movs	r0, r2
 8001e5e:	f000 f9eb 	bl	8002238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2248      	movs	r2, #72	; 0x48
 8001e66:	2101      	movs	r1, #1
 8001e68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	223e      	movs	r2, #62	; 0x3e
 8001e6e:	2101      	movs	r1, #1
 8001e70:	5499      	strb	r1, [r3, r2]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	223f      	movs	r2, #63	; 0x3f
 8001e76:	2101      	movs	r1, #1
 8001e78:	5499      	strb	r1, [r3, r2]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2240      	movs	r2, #64	; 0x40
 8001e7e:	2101      	movs	r1, #1
 8001e80:	5499      	strb	r1, [r3, r2]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2241      	movs	r2, #65	; 0x41
 8001e86:	2101      	movs	r1, #1
 8001e88:	5499      	strb	r1, [r3, r2]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2242      	movs	r2, #66	; 0x42
 8001e8e:	2101      	movs	r1, #1
 8001e90:	5499      	strb	r1, [r3, r2]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2243      	movs	r2, #67	; 0x43
 8001e96:	2101      	movs	r1, #1
 8001e98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2244      	movs	r2, #68	; 0x44
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	5499      	strb	r1, [r3, r2]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2245      	movs	r2, #69	; 0x45
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	5499      	strb	r1, [r3, r2]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2246      	movs	r2, #70	; 0x46
 8001eae:	2101      	movs	r1, #1
 8001eb0:	5499      	strb	r1, [r3, r2]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2247      	movs	r2, #71	; 0x47
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	223d      	movs	r2, #61	; 0x3d
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b002      	add	sp, #8
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ed4:	46c0      	nop			; (mov r8, r8)
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b002      	add	sp, #8
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	223d      	movs	r2, #61	; 0x3d
 8001ee8:	5c9b      	ldrb	r3, [r3, r2]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d001      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e042      	b.n	8001f7a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	223d      	movs	r2, #61	; 0x3d
 8001ef8:	2102      	movs	r1, #2
 8001efa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2101      	movs	r1, #1
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a1c      	ldr	r2, [pc, #112]	; (8001f84 <HAL_TIM_Base_Start_IT+0xa8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00f      	beq.n	8001f36 <HAL_TIM_Base_Start_IT+0x5a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	05db      	lsls	r3, r3, #23
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d009      	beq.n	8001f36 <HAL_TIM_Base_Start_IT+0x5a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <HAL_TIM_Base_Start_IT+0xac>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d004      	beq.n	8001f36 <HAL_TIM_Base_Start_IT+0x5a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a16      	ldr	r2, [pc, #88]	; (8001f8c <HAL_TIM_Base_Start_IT+0xb0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d116      	bne.n	8001f64 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <HAL_TIM_Base_Start_IT+0xb4>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b06      	cmp	r3, #6
 8001f46:	d016      	beq.n	8001f76 <HAL_TIM_Base_Start_IT+0x9a>
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	025b      	lsls	r3, r3, #9
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d011      	beq.n	8001f76 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f62:	e008      	b.n	8001f76 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2101      	movs	r1, #1
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	e000      	b.n	8001f78 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f76:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b004      	add	sp, #16
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	40012c00 	.word	0x40012c00
 8001f88:	40000400 	.word	0x40000400
 8001f8c:	40014000 	.word	0x40014000
 8001f90:	00010007 	.word	0x00010007

08001f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d124      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d11d      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	4252      	negs	r2, r2
 8001fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2203      	movs	r2, #3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d004      	beq.n	8001fde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f000 f916 	bl	8002208 <HAL_TIM_IC_CaptureCallback>
 8001fdc:	e007      	b.n	8001fee <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f000 f909 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f000 f915 	bl	8002218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d125      	bne.n	800204e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2204      	movs	r2, #4
 800200a:	4013      	ands	r3, r2
 800200c:	2b04      	cmp	r3, #4
 800200e:	d11e      	bne.n	800204e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2205      	movs	r2, #5
 8002016:	4252      	negs	r2, r2
 8002018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2202      	movs	r2, #2
 800201e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699a      	ldr	r2, [r3, #24]
 8002026:	23c0      	movs	r3, #192	; 0xc0
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4013      	ands	r3, r2
 800202c:	d004      	beq.n	8002038 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	0018      	movs	r0, r3
 8002032:	f000 f8e9 	bl	8002208 <HAL_TIM_IC_CaptureCallback>
 8002036:	e007      	b.n	8002048 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	0018      	movs	r0, r3
 800203c:	f000 f8dc 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	0018      	movs	r0, r3
 8002044:	f000 f8e8 	bl	8002218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	2208      	movs	r2, #8
 8002056:	4013      	ands	r3, r2
 8002058:	2b08      	cmp	r3, #8
 800205a:	d124      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2208      	movs	r2, #8
 8002064:	4013      	ands	r3, r2
 8002066:	2b08      	cmp	r3, #8
 8002068:	d11d      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2209      	movs	r2, #9
 8002070:	4252      	negs	r2, r2
 8002072:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2204      	movs	r2, #4
 8002078:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	2203      	movs	r2, #3
 8002082:	4013      	ands	r3, r2
 8002084:	d004      	beq.n	8002090 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	0018      	movs	r0, r3
 800208a:	f000 f8bd 	bl	8002208 <HAL_TIM_IC_CaptureCallback>
 800208e:	e007      	b.n	80020a0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	0018      	movs	r0, r3
 8002094:	f000 f8b0 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	0018      	movs	r0, r3
 800209c:	f000 f8bc 	bl	8002218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	2210      	movs	r2, #16
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b10      	cmp	r3, #16
 80020b2:	d125      	bne.n	8002100 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2210      	movs	r2, #16
 80020bc:	4013      	ands	r3, r2
 80020be:	2b10      	cmp	r3, #16
 80020c0:	d11e      	bne.n	8002100 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2211      	movs	r2, #17
 80020c8:	4252      	negs	r2, r2
 80020ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2208      	movs	r2, #8
 80020d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	69da      	ldr	r2, [r3, #28]
 80020d8:	23c0      	movs	r3, #192	; 0xc0
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4013      	ands	r3, r2
 80020de:	d004      	beq.n	80020ea <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	0018      	movs	r0, r3
 80020e4:	f000 f890 	bl	8002208 <HAL_TIM_IC_CaptureCallback>
 80020e8:	e007      	b.n	80020fa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f000 f883 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f000 f88f 	bl	8002218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2201      	movs	r2, #1
 8002108:	4013      	ands	r3, r2
 800210a:	2b01      	cmp	r3, #1
 800210c:	d10f      	bne.n	800212e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	4013      	ands	r3, r2
 8002118:	2b01      	cmp	r3, #1
 800211a:	d108      	bne.n	800212e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2202      	movs	r2, #2
 8002122:	4252      	negs	r2, r2
 8002124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0018      	movs	r0, r3
 800212a:	f7fe fb52 	bl	80007d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	2280      	movs	r2, #128	; 0x80
 8002136:	4013      	ands	r3, r2
 8002138:	2b80      	cmp	r3, #128	; 0x80
 800213a:	d10f      	bne.n	800215c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2280      	movs	r2, #128	; 0x80
 8002144:	4013      	ands	r3, r2
 8002146:	2b80      	cmp	r3, #128	; 0x80
 8002148:	d108      	bne.n	800215c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2281      	movs	r2, #129	; 0x81
 8002150:	4252      	negs	r2, r2
 8002152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	0018      	movs	r0, r3
 8002158:	f000 f8f6 	bl	8002348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	401a      	ands	r2, r3
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	429a      	cmp	r2, r3
 800216e:	d10e      	bne.n	800218e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2280      	movs	r2, #128	; 0x80
 8002178:	4013      	ands	r3, r2
 800217a:	2b80      	cmp	r3, #128	; 0x80
 800217c:	d107      	bne.n	800218e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a1c      	ldr	r2, [pc, #112]	; (80021f4 <HAL_TIM_IRQHandler+0x260>)
 8002184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	0018      	movs	r0, r3
 800218a:	f000 f8e5 	bl	8002358 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	2240      	movs	r2, #64	; 0x40
 8002196:	4013      	ands	r3, r2
 8002198:	2b40      	cmp	r3, #64	; 0x40
 800219a:	d10f      	bne.n	80021bc <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2240      	movs	r2, #64	; 0x40
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b40      	cmp	r3, #64	; 0x40
 80021a8:	d108      	bne.n	80021bc <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2241      	movs	r2, #65	; 0x41
 80021b0:	4252      	negs	r2, r2
 80021b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	0018      	movs	r0, r3
 80021b8:	f000 f836 	bl	8002228 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2220      	movs	r2, #32
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	d10f      	bne.n	80021ea <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2220      	movs	r2, #32
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d108      	bne.n	80021ea <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2221      	movs	r2, #33	; 0x21
 80021de:	4252      	negs	r2, r2
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f000 f8a7 	bl	8002338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	46bd      	mov	sp, r7
 80021ee:	b002      	add	sp, #8
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	fffffeff 	.word	0xfffffeff

080021f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	b002      	add	sp, #8
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002220:	46c0      	nop			; (mov r8, r8)
 8002222:	46bd      	mov	sp, r7
 8002224:	b002      	add	sp, #8
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002230:	46c0      	nop			; (mov r8, r8)
 8002232:	46bd      	mov	sp, r7
 8002234:	b002      	add	sp, #8
 8002236:	bd80      	pop	{r7, pc}

08002238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a34      	ldr	r2, [pc, #208]	; (800231c <TIM_Base_SetConfig+0xe4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d008      	beq.n	8002262 <TIM_Base_SetConfig+0x2a>
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	05db      	lsls	r3, r3, #23
 8002256:	429a      	cmp	r2, r3
 8002258:	d003      	beq.n	8002262 <TIM_Base_SetConfig+0x2a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a30      	ldr	r2, [pc, #192]	; (8002320 <TIM_Base_SetConfig+0xe8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d108      	bne.n	8002274 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2270      	movs	r2, #112	; 0x70
 8002266:	4393      	bics	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4313      	orrs	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a29      	ldr	r2, [pc, #164]	; (800231c <TIM_Base_SetConfig+0xe4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d018      	beq.n	80022ae <TIM_Base_SetConfig+0x76>
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	05db      	lsls	r3, r3, #23
 8002282:	429a      	cmp	r2, r3
 8002284:	d013      	beq.n	80022ae <TIM_Base_SetConfig+0x76>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a25      	ldr	r2, [pc, #148]	; (8002320 <TIM_Base_SetConfig+0xe8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00f      	beq.n	80022ae <TIM_Base_SetConfig+0x76>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a24      	ldr	r2, [pc, #144]	; (8002324 <TIM_Base_SetConfig+0xec>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00b      	beq.n	80022ae <TIM_Base_SetConfig+0x76>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a23      	ldr	r2, [pc, #140]	; (8002328 <TIM_Base_SetConfig+0xf0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d007      	beq.n	80022ae <TIM_Base_SetConfig+0x76>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a22      	ldr	r2, [pc, #136]	; (800232c <TIM_Base_SetConfig+0xf4>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d003      	beq.n	80022ae <TIM_Base_SetConfig+0x76>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a21      	ldr	r2, [pc, #132]	; (8002330 <TIM_Base_SetConfig+0xf8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d108      	bne.n	80022c0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4a20      	ldr	r2, [pc, #128]	; (8002334 <TIM_Base_SetConfig+0xfc>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2280      	movs	r2, #128	; 0x80
 80022c4:	4393      	bics	r3, r2
 80022c6:	001a      	movs	r2, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a0c      	ldr	r2, [pc, #48]	; (800231c <TIM_Base_SetConfig+0xe4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00b      	beq.n	8002306 <TIM_Base_SetConfig+0xce>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <TIM_Base_SetConfig+0xf0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d007      	beq.n	8002306 <TIM_Base_SetConfig+0xce>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a0c      	ldr	r2, [pc, #48]	; (800232c <TIM_Base_SetConfig+0xf4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d003      	beq.n	8002306 <TIM_Base_SetConfig+0xce>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <TIM_Base_SetConfig+0xf8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d103      	bne.n	800230e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	615a      	str	r2, [r3, #20]
}
 8002314:	46c0      	nop			; (mov r8, r8)
 8002316:	46bd      	mov	sp, r7
 8002318:	b004      	add	sp, #16
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40012c00 	.word	0x40012c00
 8002320:	40000400 	.word	0x40000400
 8002324:	40002000 	.word	0x40002000
 8002328:	40014000 	.word	0x40014000
 800232c:	40014400 	.word	0x40014400
 8002330:	40014800 	.word	0x40014800
 8002334:	fffffcff 	.word	0xfffffcff

08002338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b002      	add	sp, #8
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b002      	add	sp, #8
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b002      	add	sp, #8
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e046      	b.n	8002408 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2288      	movs	r2, #136	; 0x88
 800237e:	589b      	ldr	r3, [r3, r2]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d107      	bne.n	8002394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2284      	movs	r2, #132	; 0x84
 8002388:	2100      	movs	r1, #0
 800238a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	0018      	movs	r0, r3
 8002390:	f7fe fb42 	bl	8000a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2288      	movs	r2, #136	; 0x88
 8002398:	2124      	movs	r1, #36	; 0x24
 800239a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2101      	movs	r1, #1
 80023a8:	438a      	bics	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	0018      	movs	r0, r3
 80023b0:	f000 f830 	bl	8002414 <UART_SetConfig>
 80023b4:	0003      	movs	r3, r0
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e024      	b.n	8002408 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f000 fae1 	bl	8002990 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	490d      	ldr	r1, [pc, #52]	; (8002410 <HAL_UART_Init+0xa8>)
 80023da:	400a      	ands	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	212a      	movs	r1, #42	; 0x2a
 80023ea:	438a      	bics	r2, r1
 80023ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2101      	movs	r1, #1
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	0018      	movs	r0, r3
 8002402:	f000 fb79 	bl	8002af8 <UART_CheckIdleState>
 8002406:	0003      	movs	r3, r0
}
 8002408:	0018      	movs	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	b002      	add	sp, #8
 800240e:	bd80      	pop	{r7, pc}
 8002410:	ffffb7ff 	.word	0xffffb7ff

08002414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002414:	b5b0      	push	{r4, r5, r7, lr}
 8002416:	b090      	sub	sp, #64	; 0x40
 8002418:	af00      	add	r7, sp, #0
 800241a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800241c:	231a      	movs	r3, #26
 800241e:	2220      	movs	r2, #32
 8002420:	189b      	adds	r3, r3, r2
 8002422:	19db      	adds	r3, r3, r7
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	431a      	orrs	r2, r3
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	431a      	orrs	r2, r3
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	4313      	orrs	r3, r2
 800243e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4aaf      	ldr	r2, [pc, #700]	; (8002704 <UART_SetConfig+0x2f0>)
 8002448:	4013      	ands	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002452:	430b      	orrs	r3, r1
 8002454:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4aaa      	ldr	r2, [pc, #680]	; (8002708 <UART_SetConfig+0x2f4>)
 800245e:	4013      	ands	r3, r2
 8002460:	0018      	movs	r0, r3
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	68d9      	ldr	r1, [r3, #12]
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	0003      	movs	r3, r0
 800246c:	430b      	orrs	r3, r1
 800246e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4aa4      	ldr	r2, [pc, #656]	; (800270c <UART_SetConfig+0x2f8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d004      	beq.n	800248a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002486:	4313      	orrs	r3, r2
 8002488:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	4a9f      	ldr	r2, [pc, #636]	; (8002710 <UART_SetConfig+0x2fc>)
 8002492:	4013      	ands	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249c:	430b      	orrs	r3, r1
 800249e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	220f      	movs	r2, #15
 80024a8:	4393      	bics	r3, r2
 80024aa:	0018      	movs	r0, r3
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	0003      	movs	r3, r0
 80024b6:	430b      	orrs	r3, r1
 80024b8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a95      	ldr	r2, [pc, #596]	; (8002714 <UART_SetConfig+0x300>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d131      	bne.n	8002528 <UART_SetConfig+0x114>
 80024c4:	4b94      	ldr	r3, [pc, #592]	; (8002718 <UART_SetConfig+0x304>)
 80024c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c8:	2203      	movs	r2, #3
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d01d      	beq.n	800250c <UART_SetConfig+0xf8>
 80024d0:	d823      	bhi.n	800251a <UART_SetConfig+0x106>
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d00c      	beq.n	80024f0 <UART_SetConfig+0xdc>
 80024d6:	d820      	bhi.n	800251a <UART_SetConfig+0x106>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <UART_SetConfig+0xce>
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d00e      	beq.n	80024fe <UART_SetConfig+0xea>
 80024e0:	e01b      	b.n	800251a <UART_SetConfig+0x106>
 80024e2:	231b      	movs	r3, #27
 80024e4:	2220      	movs	r2, #32
 80024e6:	189b      	adds	r3, r3, r2
 80024e8:	19db      	adds	r3, r3, r7
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	e0b4      	b.n	800265a <UART_SetConfig+0x246>
 80024f0:	231b      	movs	r3, #27
 80024f2:	2220      	movs	r2, #32
 80024f4:	189b      	adds	r3, r3, r2
 80024f6:	19db      	adds	r3, r3, r7
 80024f8:	2202      	movs	r2, #2
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	e0ad      	b.n	800265a <UART_SetConfig+0x246>
 80024fe:	231b      	movs	r3, #27
 8002500:	2220      	movs	r2, #32
 8002502:	189b      	adds	r3, r3, r2
 8002504:	19db      	adds	r3, r3, r7
 8002506:	2204      	movs	r2, #4
 8002508:	701a      	strb	r2, [r3, #0]
 800250a:	e0a6      	b.n	800265a <UART_SetConfig+0x246>
 800250c:	231b      	movs	r3, #27
 800250e:	2220      	movs	r2, #32
 8002510:	189b      	adds	r3, r3, r2
 8002512:	19db      	adds	r3, r3, r7
 8002514:	2208      	movs	r2, #8
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e09f      	b.n	800265a <UART_SetConfig+0x246>
 800251a:	231b      	movs	r3, #27
 800251c:	2220      	movs	r2, #32
 800251e:	189b      	adds	r3, r3, r2
 8002520:	19db      	adds	r3, r3, r7
 8002522:	2210      	movs	r2, #16
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	e098      	b.n	800265a <UART_SetConfig+0x246>
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a7b      	ldr	r2, [pc, #492]	; (800271c <UART_SetConfig+0x308>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d131      	bne.n	8002596 <UART_SetConfig+0x182>
 8002532:	4b79      	ldr	r3, [pc, #484]	; (8002718 <UART_SetConfig+0x304>)
 8002534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002536:	220c      	movs	r2, #12
 8002538:	4013      	ands	r3, r2
 800253a:	2b0c      	cmp	r3, #12
 800253c:	d01d      	beq.n	800257a <UART_SetConfig+0x166>
 800253e:	d823      	bhi.n	8002588 <UART_SetConfig+0x174>
 8002540:	2b08      	cmp	r3, #8
 8002542:	d00c      	beq.n	800255e <UART_SetConfig+0x14a>
 8002544:	d820      	bhi.n	8002588 <UART_SetConfig+0x174>
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <UART_SetConfig+0x13c>
 800254a:	2b04      	cmp	r3, #4
 800254c:	d00e      	beq.n	800256c <UART_SetConfig+0x158>
 800254e:	e01b      	b.n	8002588 <UART_SetConfig+0x174>
 8002550:	231b      	movs	r3, #27
 8002552:	2220      	movs	r2, #32
 8002554:	189b      	adds	r3, r3, r2
 8002556:	19db      	adds	r3, r3, r7
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
 800255c:	e07d      	b.n	800265a <UART_SetConfig+0x246>
 800255e:	231b      	movs	r3, #27
 8002560:	2220      	movs	r2, #32
 8002562:	189b      	adds	r3, r3, r2
 8002564:	19db      	adds	r3, r3, r7
 8002566:	2202      	movs	r2, #2
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	e076      	b.n	800265a <UART_SetConfig+0x246>
 800256c:	231b      	movs	r3, #27
 800256e:	2220      	movs	r2, #32
 8002570:	189b      	adds	r3, r3, r2
 8002572:	19db      	adds	r3, r3, r7
 8002574:	2204      	movs	r2, #4
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	e06f      	b.n	800265a <UART_SetConfig+0x246>
 800257a:	231b      	movs	r3, #27
 800257c:	2220      	movs	r2, #32
 800257e:	189b      	adds	r3, r3, r2
 8002580:	19db      	adds	r3, r3, r7
 8002582:	2208      	movs	r2, #8
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	e068      	b.n	800265a <UART_SetConfig+0x246>
 8002588:	231b      	movs	r3, #27
 800258a:	2220      	movs	r2, #32
 800258c:	189b      	adds	r3, r3, r2
 800258e:	19db      	adds	r3, r3, r7
 8002590:	2210      	movs	r2, #16
 8002592:	701a      	strb	r2, [r3, #0]
 8002594:	e061      	b.n	800265a <UART_SetConfig+0x246>
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a61      	ldr	r2, [pc, #388]	; (8002720 <UART_SetConfig+0x30c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d106      	bne.n	80025ae <UART_SetConfig+0x19a>
 80025a0:	231b      	movs	r3, #27
 80025a2:	2220      	movs	r2, #32
 80025a4:	189b      	adds	r3, r3, r2
 80025a6:	19db      	adds	r3, r3, r7
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	e055      	b.n	800265a <UART_SetConfig+0x246>
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a5c      	ldr	r2, [pc, #368]	; (8002724 <UART_SetConfig+0x310>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d106      	bne.n	80025c6 <UART_SetConfig+0x1b2>
 80025b8:	231b      	movs	r3, #27
 80025ba:	2220      	movs	r2, #32
 80025bc:	189b      	adds	r3, r3, r2
 80025be:	19db      	adds	r3, r3, r7
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
 80025c4:	e049      	b.n	800265a <UART_SetConfig+0x246>
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a50      	ldr	r2, [pc, #320]	; (800270c <UART_SetConfig+0x2f8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d13e      	bne.n	800264e <UART_SetConfig+0x23a>
 80025d0:	4b51      	ldr	r3, [pc, #324]	; (8002718 <UART_SetConfig+0x304>)
 80025d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025d4:	23c0      	movs	r3, #192	; 0xc0
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	4013      	ands	r3, r2
 80025da:	22c0      	movs	r2, #192	; 0xc0
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	4293      	cmp	r3, r2
 80025e0:	d027      	beq.n	8002632 <UART_SetConfig+0x21e>
 80025e2:	22c0      	movs	r2, #192	; 0xc0
 80025e4:	0112      	lsls	r2, r2, #4
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d82a      	bhi.n	8002640 <UART_SetConfig+0x22c>
 80025ea:	2280      	movs	r2, #128	; 0x80
 80025ec:	0112      	lsls	r2, r2, #4
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d011      	beq.n	8002616 <UART_SetConfig+0x202>
 80025f2:	2280      	movs	r2, #128	; 0x80
 80025f4:	0112      	lsls	r2, r2, #4
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d822      	bhi.n	8002640 <UART_SetConfig+0x22c>
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d004      	beq.n	8002608 <UART_SetConfig+0x1f4>
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	00d2      	lsls	r2, r2, #3
 8002602:	4293      	cmp	r3, r2
 8002604:	d00e      	beq.n	8002624 <UART_SetConfig+0x210>
 8002606:	e01b      	b.n	8002640 <UART_SetConfig+0x22c>
 8002608:	231b      	movs	r3, #27
 800260a:	2220      	movs	r2, #32
 800260c:	189b      	adds	r3, r3, r2
 800260e:	19db      	adds	r3, r3, r7
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
 8002614:	e021      	b.n	800265a <UART_SetConfig+0x246>
 8002616:	231b      	movs	r3, #27
 8002618:	2220      	movs	r2, #32
 800261a:	189b      	adds	r3, r3, r2
 800261c:	19db      	adds	r3, r3, r7
 800261e:	2202      	movs	r2, #2
 8002620:	701a      	strb	r2, [r3, #0]
 8002622:	e01a      	b.n	800265a <UART_SetConfig+0x246>
 8002624:	231b      	movs	r3, #27
 8002626:	2220      	movs	r2, #32
 8002628:	189b      	adds	r3, r3, r2
 800262a:	19db      	adds	r3, r3, r7
 800262c:	2204      	movs	r2, #4
 800262e:	701a      	strb	r2, [r3, #0]
 8002630:	e013      	b.n	800265a <UART_SetConfig+0x246>
 8002632:	231b      	movs	r3, #27
 8002634:	2220      	movs	r2, #32
 8002636:	189b      	adds	r3, r3, r2
 8002638:	19db      	adds	r3, r3, r7
 800263a:	2208      	movs	r2, #8
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	e00c      	b.n	800265a <UART_SetConfig+0x246>
 8002640:	231b      	movs	r3, #27
 8002642:	2220      	movs	r2, #32
 8002644:	189b      	adds	r3, r3, r2
 8002646:	19db      	adds	r3, r3, r7
 8002648:	2210      	movs	r2, #16
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e005      	b.n	800265a <UART_SetConfig+0x246>
 800264e:	231b      	movs	r3, #27
 8002650:	2220      	movs	r2, #32
 8002652:	189b      	adds	r3, r3, r2
 8002654:	19db      	adds	r3, r3, r7
 8002656:	2210      	movs	r2, #16
 8002658:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a2b      	ldr	r2, [pc, #172]	; (800270c <UART_SetConfig+0x2f8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d000      	beq.n	8002666 <UART_SetConfig+0x252>
 8002664:	e0a9      	b.n	80027ba <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002666:	231b      	movs	r3, #27
 8002668:	2220      	movs	r2, #32
 800266a:	189b      	adds	r3, r3, r2
 800266c:	19db      	adds	r3, r3, r7
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b08      	cmp	r3, #8
 8002672:	d015      	beq.n	80026a0 <UART_SetConfig+0x28c>
 8002674:	dc18      	bgt.n	80026a8 <UART_SetConfig+0x294>
 8002676:	2b04      	cmp	r3, #4
 8002678:	d00d      	beq.n	8002696 <UART_SetConfig+0x282>
 800267a:	dc15      	bgt.n	80026a8 <UART_SetConfig+0x294>
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <UART_SetConfig+0x272>
 8002680:	2b02      	cmp	r3, #2
 8002682:	d005      	beq.n	8002690 <UART_SetConfig+0x27c>
 8002684:	e010      	b.n	80026a8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002686:	f7ff f9d1 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 800268a:	0003      	movs	r3, r0
 800268c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800268e:	e014      	b.n	80026ba <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002690:	4b25      	ldr	r3, [pc, #148]	; (8002728 <UART_SetConfig+0x314>)
 8002692:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002694:	e011      	b.n	80026ba <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002696:	f7ff f93d 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 800269a:	0003      	movs	r3, r0
 800269c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800269e:	e00c      	b.n	80026ba <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80026a6:	e008      	b.n	80026ba <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80026ac:	231a      	movs	r3, #26
 80026ae:	2220      	movs	r2, #32
 80026b0:	189b      	adds	r3, r3, r2
 80026b2:	19db      	adds	r3, r3, r7
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
        break;
 80026b8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80026ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d100      	bne.n	80026c2 <UART_SetConfig+0x2ae>
 80026c0:	e14b      	b.n	800295a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026c6:	4b19      	ldr	r3, [pc, #100]	; (800272c <UART_SetConfig+0x318>)
 80026c8:	0052      	lsls	r2, r2, #1
 80026ca:	5ad3      	ldrh	r3, [r2, r3]
 80026cc:	0019      	movs	r1, r3
 80026ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026d0:	f7fd fd1a 	bl	8000108 <__udivsi3>
 80026d4:	0003      	movs	r3, r0
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	0013      	movs	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	189b      	adds	r3, r3, r2
 80026e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d305      	bcc.n	80026f4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80026ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d91d      	bls.n	8002730 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80026f4:	231a      	movs	r3, #26
 80026f6:	2220      	movs	r2, #32
 80026f8:	189b      	adds	r3, r3, r2
 80026fa:	19db      	adds	r3, r3, r7
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	e12b      	b.n	800295a <UART_SetConfig+0x546>
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	cfff69f3 	.word	0xcfff69f3
 8002708:	ffffcfff 	.word	0xffffcfff
 800270c:	40008000 	.word	0x40008000
 8002710:	11fff4ff 	.word	0x11fff4ff
 8002714:	40013800 	.word	0x40013800
 8002718:	40021000 	.word	0x40021000
 800271c:	40004400 	.word	0x40004400
 8002720:	40004800 	.word	0x40004800
 8002724:	40004c00 	.word	0x40004c00
 8002728:	00f42400 	.word	0x00f42400
 800272c:	08005024 	.word	0x08005024
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800273c:	4b92      	ldr	r3, [pc, #584]	; (8002988 <UART_SetConfig+0x574>)
 800273e:	0052      	lsls	r2, r2, #1
 8002740:	5ad3      	ldrh	r3, [r2, r3]
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	69b8      	ldr	r0, [r7, #24]
 800274e:	69f9      	ldr	r1, [r7, #28]
 8002750:	f7fd fe50 	bl	80003f4 <__aeabi_uldivmod>
 8002754:	0002      	movs	r2, r0
 8002756:	000b      	movs	r3, r1
 8002758:	0e11      	lsrs	r1, r2, #24
 800275a:	021d      	lsls	r5, r3, #8
 800275c:	430d      	orrs	r5, r1
 800275e:	0214      	lsls	r4, r2, #8
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	085b      	lsrs	r3, r3, #1
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68b8      	ldr	r0, [r7, #8]
 800276e:	68f9      	ldr	r1, [r7, #12]
 8002770:	1900      	adds	r0, r0, r4
 8002772:	4169      	adcs	r1, r5
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	2300      	movs	r3, #0
 800277c:	607b      	str	r3, [r7, #4]
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f7fd fe37 	bl	80003f4 <__aeabi_uldivmod>
 8002786:	0002      	movs	r2, r0
 8002788:	000b      	movs	r3, r1
 800278a:	0013      	movs	r3, r2
 800278c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800278e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002790:	23c0      	movs	r3, #192	; 0xc0
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	429a      	cmp	r2, r3
 8002796:	d309      	bcc.n	80027ac <UART_SetConfig+0x398>
 8002798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	035b      	lsls	r3, r3, #13
 800279e:	429a      	cmp	r2, r3
 80027a0:	d204      	bcs.n	80027ac <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	e0d6      	b.n	800295a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80027ac:	231a      	movs	r3, #26
 80027ae:	2220      	movs	r2, #32
 80027b0:	189b      	adds	r3, r3, r2
 80027b2:	19db      	adds	r3, r3, r7
 80027b4:	2201      	movs	r2, #1
 80027b6:	701a      	strb	r2, [r3, #0]
 80027b8:	e0cf      	b.n	800295a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d000      	beq.n	80027c8 <UART_SetConfig+0x3b4>
 80027c6:	e070      	b.n	80028aa <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80027c8:	231b      	movs	r3, #27
 80027ca:	2220      	movs	r2, #32
 80027cc:	189b      	adds	r3, r3, r2
 80027ce:	19db      	adds	r3, r3, r7
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d015      	beq.n	8002802 <UART_SetConfig+0x3ee>
 80027d6:	dc18      	bgt.n	800280a <UART_SetConfig+0x3f6>
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d00d      	beq.n	80027f8 <UART_SetConfig+0x3e4>
 80027dc:	dc15      	bgt.n	800280a <UART_SetConfig+0x3f6>
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <UART_SetConfig+0x3d4>
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d005      	beq.n	80027f2 <UART_SetConfig+0x3de>
 80027e6:	e010      	b.n	800280a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027e8:	f7ff f920 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 80027ec:	0003      	movs	r3, r0
 80027ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027f0:	e014      	b.n	800281c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027f2:	4b66      	ldr	r3, [pc, #408]	; (800298c <UART_SetConfig+0x578>)
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027f6:	e011      	b.n	800281c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027f8:	f7ff f88c 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 80027fc:	0003      	movs	r3, r0
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002800:	e00c      	b.n	800281c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002808:	e008      	b.n	800281c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800280e:	231a      	movs	r3, #26
 8002810:	2220      	movs	r2, #32
 8002812:	189b      	adds	r3, r3, r2
 8002814:	19db      	adds	r3, r3, r7
 8002816:	2201      	movs	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]
        break;
 800281a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800281c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281e:	2b00      	cmp	r3, #0
 8002820:	d100      	bne.n	8002824 <UART_SetConfig+0x410>
 8002822:	e09a      	b.n	800295a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002828:	4b57      	ldr	r3, [pc, #348]	; (8002988 <UART_SetConfig+0x574>)
 800282a:	0052      	lsls	r2, r2, #1
 800282c:	5ad3      	ldrh	r3, [r2, r3]
 800282e:	0019      	movs	r1, r3
 8002830:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002832:	f7fd fc69 	bl	8000108 <__udivsi3>
 8002836:	0003      	movs	r3, r0
 8002838:	005a      	lsls	r2, r3, #1
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	085b      	lsrs	r3, r3, #1
 8002840:	18d2      	adds	r2, r2, r3
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	0019      	movs	r1, r3
 8002848:	0010      	movs	r0, r2
 800284a:	f7fd fc5d 	bl	8000108 <__udivsi3>
 800284e:	0003      	movs	r3, r0
 8002850:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002854:	2b0f      	cmp	r3, #15
 8002856:	d921      	bls.n	800289c <UART_SetConfig+0x488>
 8002858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	025b      	lsls	r3, r3, #9
 800285e:	429a      	cmp	r2, r3
 8002860:	d21c      	bcs.n	800289c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002864:	b29a      	uxth	r2, r3
 8002866:	200e      	movs	r0, #14
 8002868:	2420      	movs	r4, #32
 800286a:	1903      	adds	r3, r0, r4
 800286c:	19db      	adds	r3, r3, r7
 800286e:	210f      	movs	r1, #15
 8002870:	438a      	bics	r2, r1
 8002872:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002876:	085b      	lsrs	r3, r3, #1
 8002878:	b29b      	uxth	r3, r3
 800287a:	2207      	movs	r2, #7
 800287c:	4013      	ands	r3, r2
 800287e:	b299      	uxth	r1, r3
 8002880:	1903      	adds	r3, r0, r4
 8002882:	19db      	adds	r3, r3, r7
 8002884:	1902      	adds	r2, r0, r4
 8002886:	19d2      	adds	r2, r2, r7
 8002888:	8812      	ldrh	r2, [r2, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	1902      	adds	r2, r0, r4
 8002894:	19d2      	adds	r2, r2, r7
 8002896:	8812      	ldrh	r2, [r2, #0]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	e05e      	b.n	800295a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800289c:	231a      	movs	r3, #26
 800289e:	2220      	movs	r2, #32
 80028a0:	189b      	adds	r3, r3, r2
 80028a2:	19db      	adds	r3, r3, r7
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
 80028a8:	e057      	b.n	800295a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028aa:	231b      	movs	r3, #27
 80028ac:	2220      	movs	r2, #32
 80028ae:	189b      	adds	r3, r3, r2
 80028b0:	19db      	adds	r3, r3, r7
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d015      	beq.n	80028e4 <UART_SetConfig+0x4d0>
 80028b8:	dc18      	bgt.n	80028ec <UART_SetConfig+0x4d8>
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d00d      	beq.n	80028da <UART_SetConfig+0x4c6>
 80028be:	dc15      	bgt.n	80028ec <UART_SetConfig+0x4d8>
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <UART_SetConfig+0x4b6>
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d005      	beq.n	80028d4 <UART_SetConfig+0x4c0>
 80028c8:	e010      	b.n	80028ec <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028ca:	f7ff f8af 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 80028ce:	0003      	movs	r3, r0
 80028d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028d2:	e014      	b.n	80028fe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028d4:	4b2d      	ldr	r3, [pc, #180]	; (800298c <UART_SetConfig+0x578>)
 80028d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028d8:	e011      	b.n	80028fe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028da:	f7ff f81b 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 80028de:	0003      	movs	r3, r0
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028e2:	e00c      	b.n	80028fe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028ea:	e008      	b.n	80028fe <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80028f0:	231a      	movs	r3, #26
 80028f2:	2220      	movs	r2, #32
 80028f4:	189b      	adds	r3, r3, r2
 80028f6:	19db      	adds	r3, r3, r7
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
        break;
 80028fc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80028fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002900:	2b00      	cmp	r3, #0
 8002902:	d02a      	beq.n	800295a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002908:	4b1f      	ldr	r3, [pc, #124]	; (8002988 <UART_SetConfig+0x574>)
 800290a:	0052      	lsls	r2, r2, #1
 800290c:	5ad3      	ldrh	r3, [r2, r3]
 800290e:	0019      	movs	r1, r3
 8002910:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002912:	f7fd fbf9 	bl	8000108 <__udivsi3>
 8002916:	0003      	movs	r3, r0
 8002918:	001a      	movs	r2, r3
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	085b      	lsrs	r3, r3, #1
 8002920:	18d2      	adds	r2, r2, r3
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	0019      	movs	r1, r3
 8002928:	0010      	movs	r0, r2
 800292a:	f7fd fbed 	bl	8000108 <__udivsi3>
 800292e:	0003      	movs	r3, r0
 8002930:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	2b0f      	cmp	r3, #15
 8002936:	d90a      	bls.n	800294e <UART_SetConfig+0x53a>
 8002938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	025b      	lsls	r3, r3, #9
 800293e:	429a      	cmp	r2, r3
 8002940:	d205      	bcs.n	800294e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002944:	b29a      	uxth	r2, r3
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60da      	str	r2, [r3, #12]
 800294c:	e005      	b.n	800295a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800294e:	231a      	movs	r3, #26
 8002950:	2220      	movs	r2, #32
 8002952:	189b      	adds	r3, r3, r2
 8002954:	19db      	adds	r3, r3, r7
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	226a      	movs	r2, #106	; 0x6a
 800295e:	2101      	movs	r1, #1
 8002960:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	2268      	movs	r2, #104	; 0x68
 8002966:	2101      	movs	r1, #1
 8002968:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	2200      	movs	r2, #0
 800296e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	2200      	movs	r2, #0
 8002974:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002976:	231a      	movs	r3, #26
 8002978:	2220      	movs	r2, #32
 800297a:	189b      	adds	r3, r3, r2
 800297c:	19db      	adds	r3, r3, r7
 800297e:	781b      	ldrb	r3, [r3, #0]
}
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	b010      	add	sp, #64	; 0x40
 8002986:	bdb0      	pop	{r4, r5, r7, pc}
 8002988:	08005024 	.word	0x08005024
 800298c:	00f42400 	.word	0x00f42400

08002990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	2201      	movs	r2, #1
 800299e:	4013      	ands	r3, r2
 80029a0:	d00b      	beq.n	80029ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	4a4a      	ldr	r2, [pc, #296]	; (8002ad4 <UART_AdvFeatureConfig+0x144>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	0019      	movs	r1, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	2202      	movs	r2, #2
 80029c0:	4013      	ands	r3, r2
 80029c2:	d00b      	beq.n	80029dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4a43      	ldr	r2, [pc, #268]	; (8002ad8 <UART_AdvFeatureConfig+0x148>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	0019      	movs	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	2204      	movs	r2, #4
 80029e2:	4013      	ands	r3, r2
 80029e4:	d00b      	beq.n	80029fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4a3b      	ldr	r2, [pc, #236]	; (8002adc <UART_AdvFeatureConfig+0x14c>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	0019      	movs	r1, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	2208      	movs	r2, #8
 8002a04:	4013      	ands	r3, r2
 8002a06:	d00b      	beq.n	8002a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4a34      	ldr	r2, [pc, #208]	; (8002ae0 <UART_AdvFeatureConfig+0x150>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	0019      	movs	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	2210      	movs	r2, #16
 8002a26:	4013      	ands	r3, r2
 8002a28:	d00b      	beq.n	8002a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a2c      	ldr	r2, [pc, #176]	; (8002ae4 <UART_AdvFeatureConfig+0x154>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	0019      	movs	r1, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	2220      	movs	r2, #32
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d00b      	beq.n	8002a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	4a25      	ldr	r2, [pc, #148]	; (8002ae8 <UART_AdvFeatureConfig+0x158>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	0019      	movs	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	2240      	movs	r2, #64	; 0x40
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d01d      	beq.n	8002aaa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <UART_AdvFeatureConfig+0x15c>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	0019      	movs	r1, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	035b      	lsls	r3, r3, #13
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d10b      	bne.n	8002aaa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <UART_AdvFeatureConfig+0x160>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	2280      	movs	r2, #128	; 0x80
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d00b      	beq.n	8002acc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <UART_AdvFeatureConfig+0x164>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	0019      	movs	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	605a      	str	r2, [r3, #4]
  }
}
 8002acc:	46c0      	nop			; (mov r8, r8)
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b002      	add	sp, #8
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	fffdffff 	.word	0xfffdffff
 8002ad8:	fffeffff 	.word	0xfffeffff
 8002adc:	fffbffff 	.word	0xfffbffff
 8002ae0:	ffff7fff 	.word	0xffff7fff
 8002ae4:	ffffefff 	.word	0xffffefff
 8002ae8:	ffffdfff 	.word	0xffffdfff
 8002aec:	ffefffff 	.word	0xffefffff
 8002af0:	ff9fffff 	.word	0xff9fffff
 8002af4:	fff7ffff 	.word	0xfff7ffff

08002af8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2290      	movs	r2, #144	; 0x90
 8002b04:	2100      	movs	r1, #0
 8002b06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b08:	f7fe f842 	bl	8000b90 <HAL_GetTick>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2208      	movs	r2, #8
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d10c      	bne.n	8002b38 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2280      	movs	r2, #128	; 0x80
 8002b22:	0391      	lsls	r1, r2, #14
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	4a1a      	ldr	r2, [pc, #104]	; (8002b90 <UART_CheckIdleState+0x98>)
 8002b28:	9200      	str	r2, [sp, #0]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f000 f832 	bl	8002b94 <UART_WaitOnFlagUntilTimeout>
 8002b30:	1e03      	subs	r3, r0, #0
 8002b32:	d001      	beq.n	8002b38 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e026      	b.n	8002b86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2204      	movs	r2, #4
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d10c      	bne.n	8002b60 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2280      	movs	r2, #128	; 0x80
 8002b4a:	03d1      	lsls	r1, r2, #15
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4a10      	ldr	r2, [pc, #64]	; (8002b90 <UART_CheckIdleState+0x98>)
 8002b50:	9200      	str	r2, [sp, #0]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f000 f81e 	bl	8002b94 <UART_WaitOnFlagUntilTimeout>
 8002b58:	1e03      	subs	r3, r0, #0
 8002b5a:	d001      	beq.n	8002b60 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e012      	b.n	8002b86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2288      	movs	r2, #136	; 0x88
 8002b64:	2120      	movs	r1, #32
 8002b66:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	228c      	movs	r2, #140	; 0x8c
 8002b6c:	2120      	movs	r1, #32
 8002b6e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2284      	movs	r2, #132	; 0x84
 8002b80:	2100      	movs	r1, #0
 8002b82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b004      	add	sp, #16
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	01ffffff 	.word	0x01ffffff

08002b94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b094      	sub	sp, #80	; 0x50
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	1dfb      	adds	r3, r7, #7
 8002ba2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ba4:	e0a7      	b.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba8:	3301      	adds	r3, #1
 8002baa:	d100      	bne.n	8002bae <UART_WaitOnFlagUntilTimeout+0x1a>
 8002bac:	e0a3      	b.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bae:	f7fd ffef 	bl	8000b90 <HAL_GetTick>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d302      	bcc.n	8002bc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d13f      	bne.n	8002c44 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8002bce:	2301      	movs	r3, #1
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	f383 8810 	msr	PRIMASK, r3
}
 8002bd8:	46c0      	nop			; (mov r8, r8)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	494e      	ldr	r1, [pc, #312]	; (8002d20 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002be6:	400a      	ands	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bec:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	f383 8810 	msr	PRIMASK, r3
}
 8002bf4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bfa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bfe:	643b      	str	r3, [r7, #64]	; 0x40
 8002c00:	2301      	movs	r3, #1
 8002c02:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c06:	f383 8810 	msr	PRIMASK, r3
}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2101      	movs	r1, #1
 8002c18:	438a      	bics	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c22:	f383 8810 	msr	PRIMASK, r3
}
 8002c26:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2288      	movs	r2, #136	; 0x88
 8002c2c:	2120      	movs	r1, #32
 8002c2e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	228c      	movs	r2, #140	; 0x8c
 8002c34:	2120      	movs	r1, #32
 8002c36:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2284      	movs	r2, #132	; 0x84
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e069      	b.n	8002d18 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d052      	beq.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69da      	ldr	r2, [r3, #28]
 8002c56:	2380      	movs	r3, #128	; 0x80
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d148      	bne.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2280      	movs	r2, #128	; 0x80
 8002c6a:	0112      	lsls	r2, r2, #4
 8002c6c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c72:	613b      	str	r3, [r7, #16]
  return(result);
 8002c74:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c78:	2301      	movs	r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f383 8810 	msr	PRIMASK, r3
}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4924      	ldr	r1, [pc, #144]	; (8002d20 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002c90:	400a      	ands	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	f383 8810 	msr	PRIMASK, r3
}
 8002c9e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ca4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ca6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002caa:	2301      	movs	r3, #1
 8002cac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	f383 8810 	msr	PRIMASK, r3
}
 8002cb4:	46c0      	nop			; (mov r8, r8)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	438a      	bics	r2, r1
 8002cc4:	609a      	str	r2, [r3, #8]
 8002cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	f383 8810 	msr	PRIMASK, r3
}
 8002cd0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2288      	movs	r2, #136	; 0x88
 8002cd6:	2120      	movs	r1, #32
 8002cd8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	228c      	movs	r2, #140	; 0x8c
 8002cde:	2120      	movs	r1, #32
 8002ce0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2290      	movs	r2, #144	; 0x90
 8002ce6:	2120      	movs	r1, #32
 8002ce8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2284      	movs	r2, #132	; 0x84
 8002cee:	2100      	movs	r1, #0
 8002cf0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e010      	b.n	8002d18 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	425a      	negs	r2, r3
 8002d06:	4153      	adcs	r3, r2
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	001a      	movs	r2, r3
 8002d0c:	1dfb      	adds	r3, r7, #7
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d100      	bne.n	8002d16 <UART_WaitOnFlagUntilTimeout+0x182>
 8002d14:	e747      	b.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b014      	add	sp, #80	; 0x50
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	fffffe5f 	.word	0xfffffe5f

08002d24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2284      	movs	r2, #132	; 0x84
 8002d30:	5c9b      	ldrb	r3, [r3, r2]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_UARTEx_DisableFifoMode+0x16>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e027      	b.n	8002d8a <HAL_UARTEx_DisableFifoMode+0x66>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2284      	movs	r2, #132	; 0x84
 8002d3e:	2101      	movs	r1, #1
 8002d40:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2288      	movs	r2, #136	; 0x88
 8002d46:	2124      	movs	r1, #36	; 0x24
 8002d48:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	438a      	bics	r2, r1
 8002d60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4a0b      	ldr	r2, [pc, #44]	; (8002d94 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2288      	movs	r2, #136	; 0x88
 8002d7c:	2120      	movs	r1, #32
 8002d7e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2284      	movs	r2, #132	; 0x84
 8002d84:	2100      	movs	r1, #0
 8002d86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b004      	add	sp, #16
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	dfffffff 	.word	0xdfffffff

08002d98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2284      	movs	r2, #132	; 0x84
 8002da6:	5c9b      	ldrb	r3, [r3, r2]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e02e      	b.n	8002e0e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2284      	movs	r2, #132	; 0x84
 8002db4:	2101      	movs	r1, #1
 8002db6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2288      	movs	r2, #136	; 0x88
 8002dbc:	2124      	movs	r1, #36	; 0x24
 8002dbe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	438a      	bics	r2, r1
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	08d9      	lsrs	r1, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 f854 	bl	8002e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2288      	movs	r2, #136	; 0x88
 8002e00:	2120      	movs	r1, #32
 8002e02:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2284      	movs	r2, #132	; 0x84
 8002e08:	2100      	movs	r1, #0
 8002e0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	0018      	movs	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b004      	add	sp, #16
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2284      	movs	r2, #132	; 0x84
 8002e26:	5c9b      	ldrb	r3, [r3, r2]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e02f      	b.n	8002e90 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2284      	movs	r2, #132	; 0x84
 8002e34:	2101      	movs	r1, #1
 8002e36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2288      	movs	r2, #136	; 0x88
 8002e3c:	2124      	movs	r1, #36	; 0x24
 8002e3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2101      	movs	r1, #1
 8002e54:	438a      	bics	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	4a0e      	ldr	r2, [pc, #56]	; (8002e98 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	0019      	movs	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	0018      	movs	r0, r3
 8002e72:	f000 f813 	bl	8002e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2288      	movs	r2, #136	; 0x88
 8002e82:	2120      	movs	r1, #32
 8002e84:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2284      	movs	r2, #132	; 0x84
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b004      	add	sp, #16
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	f1ffffff 	.word	0xf1ffffff

08002e9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d108      	bne.n	8002ebe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	226a      	movs	r2, #106	; 0x6a
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2268      	movs	r2, #104	; 0x68
 8002eb8:	2101      	movs	r1, #1
 8002eba:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002ebc:	e043      	b.n	8002f46 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002ebe:	260f      	movs	r6, #15
 8002ec0:	19bb      	adds	r3, r7, r6
 8002ec2:	2208      	movs	r2, #8
 8002ec4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002ec6:	200e      	movs	r0, #14
 8002ec8:	183b      	adds	r3, r7, r0
 8002eca:	2208      	movs	r2, #8
 8002ecc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	0e5b      	lsrs	r3, r3, #25
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	240d      	movs	r4, #13
 8002eda:	193b      	adds	r3, r7, r4
 8002edc:	2107      	movs	r1, #7
 8002ede:	400a      	ands	r2, r1
 8002ee0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	0f5b      	lsrs	r3, r3, #29
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	250c      	movs	r5, #12
 8002eee:	197b      	adds	r3, r7, r5
 8002ef0:	2107      	movs	r1, #7
 8002ef2:	400a      	ands	r2, r1
 8002ef4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002ef6:	183b      	adds	r3, r7, r0
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	197a      	adds	r2, r7, r5
 8002efc:	7812      	ldrb	r2, [r2, #0]
 8002efe:	4914      	ldr	r1, [pc, #80]	; (8002f50 <UARTEx_SetNbDataToProcess+0xb4>)
 8002f00:	5c8a      	ldrb	r2, [r1, r2]
 8002f02:	435a      	muls	r2, r3
 8002f04:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002f06:	197b      	adds	r3, r7, r5
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	4a12      	ldr	r2, [pc, #72]	; (8002f54 <UARTEx_SetNbDataToProcess+0xb8>)
 8002f0c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f0e:	0019      	movs	r1, r3
 8002f10:	f7fd f984 	bl	800021c <__divsi3>
 8002f14:	0003      	movs	r3, r0
 8002f16:	b299      	uxth	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	226a      	movs	r2, #106	; 0x6a
 8002f1c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f1e:	19bb      	adds	r3, r7, r6
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	193a      	adds	r2, r7, r4
 8002f24:	7812      	ldrb	r2, [r2, #0]
 8002f26:	490a      	ldr	r1, [pc, #40]	; (8002f50 <UARTEx_SetNbDataToProcess+0xb4>)
 8002f28:	5c8a      	ldrb	r2, [r1, r2]
 8002f2a:	435a      	muls	r2, r3
 8002f2c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002f2e:	193b      	adds	r3, r7, r4
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	4a08      	ldr	r2, [pc, #32]	; (8002f54 <UARTEx_SetNbDataToProcess+0xb8>)
 8002f34:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f36:	0019      	movs	r1, r3
 8002f38:	f7fd f970 	bl	800021c <__divsi3>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	b299      	uxth	r1, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2268      	movs	r2, #104	; 0x68
 8002f44:	5299      	strh	r1, [r3, r2]
}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b005      	add	sp, #20
 8002f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	0800503c 	.word	0x0800503c
 8002f54:	08005044 	.word	0x08005044

08002f58 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3308      	adds	r3, #8
 8002f64:	001a      	movs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	4252      	negs	r2, r2
 8002f70:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3308      	adds	r3, #8
 8002f76:	001a      	movs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3308      	adds	r3, #8
 8002f80:	001a      	movs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b002      	add	sp, #8
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b002      	add	sp, #8
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	d103      	bne.n	8002fc8 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	e00c      	b.n	8002fe2 <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3308      	adds	r3, #8
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	e002      	b.n	8002fd6 <vListInsert+0x2c>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d2f6      	bcs.n	8002fd0 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	601a      	str	r2, [r3, #0]
}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	46bd      	mov	sp, r7
 8003012:	b004      	add	sp, #16
 8003014:	bd80      	pop	{r7, pc}

08003016 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6892      	ldr	r2, [r2, #8]
 800302c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6852      	ldr	r2, [r2, #4]
 8003036:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	429a      	cmp	r2, r3
 8003040:	d103      	bne.n	800304a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
}
 800305e:	0018      	movs	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	b004      	add	sp, #16
 8003064:	bd80      	pop	{r7, pc}

08003066 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003066:	b5b0      	push	{r4, r5, r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003070:	2301      	movs	r3, #1
 8003072:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <xQueueGenericReset+0x1c>
 800307e:	b672      	cpsid	i
 8003080:	e7fe      	b.n	8003080 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d100      	bne.n	800308a <xQueueGenericReset+0x24>
 8003088:	e06a      	b.n	8003160 <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800308e:	2b00      	cmp	r3, #0
 8003090:	d066      	beq.n	8003160 <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309a:	2400      	movs	r4, #0
 800309c:	0c15      	lsrs	r5, r2, #16
 800309e:	0c19      	lsrs	r1, r3, #16
 80030a0:	b2a8      	uxth	r0, r5
 80030a2:	2800      	cmp	r0, #0
 80030a4:	d104      	bne.n	80030b0 <xQueueGenericReset+0x4a>
 80030a6:	b288      	uxth	r0, r1
 80030a8:	2800      	cmp	r0, #0
 80030aa:	d013      	beq.n	80030d4 <xQueueGenericReset+0x6e>
 80030ac:	1c10      	adds	r0, r2, #0
 80030ae:	e004      	b.n	80030ba <xQueueGenericReset+0x54>
 80030b0:	b289      	uxth	r1, r1
 80030b2:	2900      	cmp	r1, #0
 80030b4:	d10d      	bne.n	80030d2 <xQueueGenericReset+0x6c>
 80030b6:	1c29      	adds	r1, r5, #0
 80030b8:	1c18      	adds	r0, r3, #0
 80030ba:	b292      	uxth	r2, r2
 80030bc:	b29b      	uxth	r3, r3
 80030be:	435a      	muls	r2, r3
 80030c0:	b283      	uxth	r3, r0
 80030c2:	b289      	uxth	r1, r1
 80030c4:	434b      	muls	r3, r1
 80030c6:	0c12      	lsrs	r2, r2, #16
 80030c8:	189b      	adds	r3, r3, r2
 80030ca:	141b      	asrs	r3, r3, #16
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d000      	beq.n	80030d4 <xQueueGenericReset+0x6e>
 80030d2:	2401      	movs	r4, #1
 80030d4:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 80030d6:	d143      	bne.n	8003160 <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 80030d8:	f001 fcda 	bl	8004a90 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	434b      	muls	r3, r1
 80030ea:	18d2      	adds	r2, r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2200      	movs	r2, #0
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003106:	1e59      	subs	r1, r3, #1
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	434b      	muls	r3, r1
 800310e:	18d2      	adds	r2, r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2244      	movs	r2, #68	; 0x44
 8003118:	21ff      	movs	r1, #255	; 0xff
 800311a:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2245      	movs	r2, #69	; 0x45
 8003120:	21ff      	movs	r1, #255	; 0xff
 8003122:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10d      	bne.n	8003146 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d013      	beq.n	800315a <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	3310      	adds	r3, #16
 8003136:	0018      	movs	r0, r3
 8003138:	f000 ff2e 	bl	8003f98 <xTaskRemoveFromEventList>
 800313c:	1e03      	subs	r3, r0, #0
 800313e:	d00c      	beq.n	800315a <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003140:	f001 fc96 	bl	8004a70 <vPortYield>
 8003144:	e009      	b.n	800315a <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	3310      	adds	r3, #16
 800314a:	0018      	movs	r0, r3
 800314c:	f7ff ff04 	bl	8002f58 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	3324      	adds	r3, #36	; 0x24
 8003154:	0018      	movs	r0, r3
 8003156:	f7ff feff 	bl	8002f58 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800315a:	f001 fcab 	bl	8004ab4 <vPortExitCritical>
 800315e:	e001      	b.n	8003164 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <xQueueGenericReset+0x108>
 800316a:	b672      	cpsid	i
 800316c:	e7fe      	b.n	800316c <xQueueGenericReset+0x106>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800316e:	68fb      	ldr	r3, [r7, #12]
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b004      	add	sp, #16
 8003176:	bdb0      	pop	{r4, r5, r7, pc}

08003178 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800317a:	b08b      	sub	sp, #44	; 0x2c
 800317c:	af02      	add	r7, sp, #8
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	1dfb      	adds	r3, r7, #7
 8003184:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d047      	beq.n	8003220 <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003190:	2000      	movs	r0, #0
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	0c19      	lsrs	r1, r3, #16
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1c1e      	adds	r6, r3, #0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	1c15      	adds	r5, r2, #0
 80031a2:	b28a      	uxth	r2, r1
 80031a4:	2a00      	cmp	r2, #0
 80031a6:	d105      	bne.n	80031b4 <xQueueGenericCreate+0x3c>
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	2a00      	cmp	r2, #0
 80031ac:	d013      	beq.n	80031d6 <xQueueGenericCreate+0x5e>
 80031ae:	1c19      	adds	r1, r3, #0
 80031b0:	1c34      	adds	r4, r6, #0
 80031b2:	e003      	b.n	80031bc <xQueueGenericCreate+0x44>
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10c      	bne.n	80031d4 <xQueueGenericCreate+0x5c>
 80031ba:	1c2c      	adds	r4, r5, #0
 80031bc:	b2b3      	uxth	r3, r6
 80031be:	b2aa      	uxth	r2, r5
 80031c0:	435a      	muls	r2, r3
 80031c2:	b2a3      	uxth	r3, r4
 80031c4:	b289      	uxth	r1, r1
 80031c6:	434b      	muls	r3, r1
 80031c8:	0c12      	lsrs	r2, r2, #16
 80031ca:	189b      	adds	r3, r3, r2
 80031cc:	141b      	asrs	r3, r3, #16
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d000      	beq.n	80031d6 <xQueueGenericCreate+0x5e>
 80031d4:	2001      	movs	r0, #1
 80031d6:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80031d8:	d122      	bne.n	8003220 <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80031e0:	3351      	adds	r3, #81	; 0x51
 80031e2:	d81d      	bhi.n	8003220 <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	4353      	muls	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	3350      	adds	r3, #80	; 0x50
 80031f0:	0018      	movs	r0, r3
 80031f2:	f001 fce5 	bl	8004bc0 <pvPortMalloc>
 80031f6:	0003      	movs	r3, r0
 80031f8:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d014      	beq.n	800322a <xQueueGenericCreate+0xb2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	3350      	adds	r3, #80	; 0x50
 8003208:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800320a:	1dfb      	adds	r3, r7, #7
 800320c:	781c      	ldrb	r4, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	0023      	movs	r3, r4
 800321a:	f000 f80b 	bl	8003234 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800321e:	e004      	b.n	800322a <xQueueGenericCreate+0xb2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <xQueueGenericCreate+0xb2>
 8003226:	b672      	cpsid	i
 8003228:	e7fe      	b.n	8003228 <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800322a:	69fb      	ldr	r3, [r7, #28]
    }
 800322c:	0018      	movs	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	b009      	add	sp, #36	; 0x24
 8003232:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003234 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	001a      	movs	r2, r3
 8003242:	1cfb      	adds	r3, r7, #3
 8003244:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d103      	bne.n	8003254 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	e002      	b.n	800325a <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2101      	movs	r1, #1
 800326a:	0018      	movs	r0, r3
 800326c:	f7ff fefb 	bl	8003066 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	1cfa      	adds	r2, r7, #3
 8003274:	214c      	movs	r1, #76	; 0x4c
 8003276:	7812      	ldrb	r2, [r2, #0]
 8003278:	545a      	strb	r2, [r3, r1]
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	46bd      	mov	sp, r7
 800327e:	b004      	add	sp, #16
 8003280:	bd80      	pop	{r7, pc}

08003282 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b08a      	sub	sp, #40	; 0x28
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800328e:	2300      	movs	r3, #0
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <xQueueReceive+0x1e>
 800329c:	b672      	cpsid	i
 800329e:	e7fe      	b.n	800329e <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d103      	bne.n	80032ae <xQueueReceive+0x2c>
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <xQueueReceive+0x30>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <xQueueReceive+0x32>
 80032b2:	2300      	movs	r3, #0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <xQueueReceive+0x3a>
 80032b8:	b672      	cpsid	i
 80032ba:	e7fe      	b.n	80032ba <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032bc:	f001 f856 	bl	800436c <xTaskGetSchedulerState>
 80032c0:	1e03      	subs	r3, r0, #0
 80032c2:	d102      	bne.n	80032ca <xQueueReceive+0x48>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <xQueueReceive+0x4c>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <xQueueReceive+0x4e>
 80032ce:	2300      	movs	r3, #0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <xQueueReceive+0x56>
 80032d4:	b672      	cpsid	i
 80032d6:	e7fe      	b.n	80032d6 <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80032d8:	f001 fbda 	bl	8004a90 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01a      	beq.n	800331e <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	0011      	movs	r1, r2
 80032ee:	0018      	movs	r0, r3
 80032f0:	f000 f87c 	bl	80033ec <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	1e5a      	subs	r2, r3, #1
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	3310      	adds	r3, #16
 8003308:	0018      	movs	r0, r3
 800330a:	f000 fe45 	bl	8003f98 <xTaskRemoveFromEventList>
 800330e:	1e03      	subs	r3, r0, #0
 8003310:	d001      	beq.n	8003316 <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003312:	f001 fbad 	bl	8004a70 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003316:	f001 fbcd 	bl	8004ab4 <vPortExitCritical>
                return pdPASS;
 800331a:	2301      	movs	r3, #1
 800331c:	e062      	b.n	80033e4 <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d103      	bne.n	800332c <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003324:	f001 fbc6 	bl	8004ab4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003328:	2300      	movs	r3, #0
 800332a:	e05b      	b.n	80033e4 <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003332:	2314      	movs	r3, #20
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	0018      	movs	r0, r3
 8003338:	f000 fef8 	bl	800412c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800333c:	2301      	movs	r3, #1
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003340:	f001 fbb8 	bl	8004ab4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003344:	f000 fb6c 	bl	8003a20 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003348:	f001 fba2 	bl	8004a90 <vPortEnterCritical>
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	2244      	movs	r2, #68	; 0x44
 8003350:	5c9b      	ldrb	r3, [r3, r2]
 8003352:	b25b      	sxtb	r3, r3
 8003354:	3301      	adds	r3, #1
 8003356:	d103      	bne.n	8003360 <xQueueReceive+0xde>
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	2244      	movs	r2, #68	; 0x44
 800335c:	2100      	movs	r1, #0
 800335e:	5499      	strb	r1, [r3, r2]
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	2245      	movs	r2, #69	; 0x45
 8003364:	5c9b      	ldrb	r3, [r3, r2]
 8003366:	b25b      	sxtb	r3, r3
 8003368:	3301      	adds	r3, #1
 800336a:	d103      	bne.n	8003374 <xQueueReceive+0xf2>
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	2245      	movs	r2, #69	; 0x45
 8003370:	2100      	movs	r1, #0
 8003372:	5499      	strb	r1, [r3, r2]
 8003374:	f001 fb9e 	bl	8004ab4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003378:	1d3a      	adds	r2, r7, #4
 800337a:	2314      	movs	r3, #20
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	0011      	movs	r1, r2
 8003380:	0018      	movs	r0, r3
 8003382:	f000 fee7 	bl	8004154 <xTaskCheckForTimeOut>
 8003386:	1e03      	subs	r3, r0, #0
 8003388:	d11e      	bne.n	80033c8 <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	0018      	movs	r0, r3
 800338e:	f000 f8b1 	bl	80034f4 <prvIsQueueEmpty>
 8003392:	1e03      	subs	r3, r0, #0
 8003394:	d011      	beq.n	80033ba <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	3324      	adds	r3, #36	; 0x24
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	0011      	movs	r1, r2
 800339e:	0018      	movs	r0, r3
 80033a0:	f000 fd9e 	bl	8003ee0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	0018      	movs	r0, r3
 80033a8:	f000 f846 	bl	8003438 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80033ac:	f000 fb44 	bl	8003a38 <xTaskResumeAll>
 80033b0:	1e03      	subs	r3, r0, #0
 80033b2:	d191      	bne.n	80032d8 <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 80033b4:	f001 fb5c 	bl	8004a70 <vPortYield>
 80033b8:	e78e      	b.n	80032d8 <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	0018      	movs	r0, r3
 80033be:	f000 f83b 	bl	8003438 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80033c2:	f000 fb39 	bl	8003a38 <xTaskResumeAll>
 80033c6:	e787      	b.n	80032d8 <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	0018      	movs	r0, r3
 80033cc:	f000 f834 	bl	8003438 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80033d0:	f000 fb32 	bl	8003a38 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 f88c 	bl	80034f4 <prvIsQueueEmpty>
 80033dc:	1e03      	subs	r3, r0, #0
 80033de:	d100      	bne.n	80033e2 <xQueueReceive+0x160>
 80033e0:	e77a      	b.n	80032d8 <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80033e2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b00a      	add	sp, #40	; 0x28
 80033ea:	bd80      	pop	{r7, pc}

080033ec <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d018      	beq.n	8003430 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	18d2      	adds	r2, r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	429a      	cmp	r2, r3
 8003416:	d303      	bcc.n	8003420 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68d9      	ldr	r1, [r3, #12]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	0018      	movs	r0, r3
 800342c:	f001 fd9e 	bl	8004f6c <memcpy>
    }
}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}

08003438 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003440:	f001 fb26 	bl	8004a90 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003444:	230f      	movs	r3, #15
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	2145      	movs	r1, #69	; 0x45
 800344c:	5c52      	ldrb	r2, [r2, r1]
 800344e:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003450:	e013      	b.n	800347a <prvUnlockQueue+0x42>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	2b00      	cmp	r3, #0
 8003458:	d016      	beq.n	8003488 <prvUnlockQueue+0x50>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3324      	adds	r3, #36	; 0x24
 800345e:	0018      	movs	r0, r3
 8003460:	f000 fd9a 	bl	8003f98 <xTaskRemoveFromEventList>
 8003464:	1e03      	subs	r3, r0, #0
 8003466:	d001      	beq.n	800346c <prvUnlockQueue+0x34>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003468:	f000 fec8 	bl	80041fc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800346c:	210f      	movs	r1, #15
 800346e:	187b      	adds	r3, r7, r1
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	3b01      	subs	r3, #1
 8003474:	b2da      	uxtb	r2, r3
 8003476:	187b      	adds	r3, r7, r1
 8003478:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800347a:	230f      	movs	r3, #15
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	b25b      	sxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	dce5      	bgt.n	8003452 <prvUnlockQueue+0x1a>
 8003486:	e000      	b.n	800348a <prvUnlockQueue+0x52>
                        break;
 8003488:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2245      	movs	r2, #69	; 0x45
 800348e:	21ff      	movs	r1, #255	; 0xff
 8003490:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8003492:	f001 fb0f 	bl	8004ab4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003496:	f001 fafb 	bl	8004a90 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800349a:	230e      	movs	r3, #14
 800349c:	18fb      	adds	r3, r7, r3
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	2144      	movs	r1, #68	; 0x44
 80034a2:	5c52      	ldrb	r2, [r2, r1]
 80034a4:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80034a6:	e013      	b.n	80034d0 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d016      	beq.n	80034de <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3310      	adds	r3, #16
 80034b4:	0018      	movs	r0, r3
 80034b6:	f000 fd6f 	bl	8003f98 <xTaskRemoveFromEventList>
 80034ba:	1e03      	subs	r3, r0, #0
 80034bc:	d001      	beq.n	80034c2 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 80034be:	f000 fe9d 	bl	80041fc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80034c2:	210e      	movs	r1, #14
 80034c4:	187b      	adds	r3, r7, r1
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	187b      	adds	r3, r7, r1
 80034ce:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80034d0:	230e      	movs	r3, #14
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	b25b      	sxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	dce5      	bgt.n	80034a8 <prvUnlockQueue+0x70>
 80034dc:	e000      	b.n	80034e0 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 80034de:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2244      	movs	r2, #68	; 0x44
 80034e4:	21ff      	movs	r1, #255	; 0xff
 80034e6:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 80034e8:	f001 fae4 	bl	8004ab4 <vPortExitCritical>
}
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b004      	add	sp, #16
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80034fc:	f001 fac8 	bl	8004a90 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003508:	2301      	movs	r3, #1
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	e001      	b.n	8003512 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003512:	f001 facf 	bl	8004ab4 <vPortExitCritical>

    return xReturn;
 8003516:	68fb      	ldr	r3, [r7, #12]
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b004      	add	sp, #16
 800351e:	bd80      	pop	{r7, pc}

08003520 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <vQueueAddToRegistry+0x14>
 8003530:	b672      	cpsid	i
 8003532:	e7fe      	b.n	8003532 <vQueueAddToRegistry+0x12>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003534:	2300      	movs	r3, #0
 8003536:	60bb      	str	r3, [r7, #8]

        if( pcQueueName != NULL )
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d025      	beq.n	800358a <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e01f      	b.n	8003584 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003544:	4a17      	ldr	r2, [pc, #92]	; (80035a4 <vQueueAddToRegistry+0x84>)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	18d3      	adds	r3, r2, r3
 800354c:	3304      	adds	r3, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	429a      	cmp	r2, r3
 8003554:	d105      	bne.n	8003562 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	00da      	lsls	r2, r3, #3
 800355a:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <vQueueAddToRegistry+0x84>)
 800355c:	18d3      	adds	r3, r2, r3
 800355e:	60bb      	str	r3, [r7, #8]
                    break;
 8003560:	e013      	b.n	800358a <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10a      	bne.n	800357e <vQueueAddToRegistry+0x5e>
 8003568:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <vQueueAddToRegistry+0x84>)
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	00d2      	lsls	r2, r2, #3
 800356e:	58d3      	ldr	r3, [r2, r3]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d104      	bne.n	800357e <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	00da      	lsls	r2, r3, #3
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <vQueueAddToRegistry+0x84>)
 800357a:	18d3      	adds	r3, r2, r3
 800357c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	3301      	adds	r3, #1
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b07      	cmp	r3, #7
 8003588:	d9dc      	bls.n	8003544 <vQueueAddToRegistry+0x24>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b004      	add	sp, #16
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20000114 	.word	0x20000114

080035a8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80035b8:	f001 fa6a 	bl	8004a90 <vPortEnterCritical>
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2244      	movs	r2, #68	; 0x44
 80035c0:	5c9b      	ldrb	r3, [r3, r2]
 80035c2:	b25b      	sxtb	r3, r3
 80035c4:	3301      	adds	r3, #1
 80035c6:	d103      	bne.n	80035d0 <vQueueWaitForMessageRestricted+0x28>
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2244      	movs	r2, #68	; 0x44
 80035cc:	2100      	movs	r1, #0
 80035ce:	5499      	strb	r1, [r3, r2]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2245      	movs	r2, #69	; 0x45
 80035d4:	5c9b      	ldrb	r3, [r3, r2]
 80035d6:	b25b      	sxtb	r3, r3
 80035d8:	3301      	adds	r3, #1
 80035da:	d103      	bne.n	80035e4 <vQueueWaitForMessageRestricted+0x3c>
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2245      	movs	r2, #69	; 0x45
 80035e0:	2100      	movs	r1, #0
 80035e2:	5499      	strb	r1, [r3, r2]
 80035e4:	f001 fa66 	bl	8004ab4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d106      	bne.n	80035fe <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	3324      	adds	r3, #36	; 0x24
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	0018      	movs	r0, r3
 80035fa:	f000 fc8f 	bl	8003f1c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	0018      	movs	r0, r3
 8003602:	f7ff ff19 	bl	8003438 <prvUnlockQueue>
    }
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	46bd      	mov	sp, r7
 800360a:	b006      	add	sp, #24
 800360c:	bd80      	pop	{r7, pc}

0800360e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800360e:	b590      	push	{r4, r7, lr}
 8003610:	b08d      	sub	sp, #52	; 0x34
 8003612:	af04      	add	r7, sp, #16
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	603b      	str	r3, [r7, #0]
 800361a:	1dbb      	adds	r3, r7, #6
 800361c:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800361e:	1dbb      	adds	r3, r7, #6
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	0018      	movs	r0, r3
 8003626:	f001 facb 	bl	8004bc0 <pvPortMalloc>
 800362a:	0003      	movs	r3, r0
 800362c:	617b      	str	r3, [r7, #20]

                if( pxStack != NULL )
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d010      	beq.n	8003656 <xTaskCreate+0x48>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003634:	205c      	movs	r0, #92	; 0x5c
 8003636:	f001 fac3 	bl	8004bc0 <pvPortMalloc>
 800363a:	0003      	movs	r3, r0
 800363c:	61fb      	str	r3, [r7, #28]

                    if( pxNewTCB != NULL )
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <xTaskCreate+0x3e>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	631a      	str	r2, [r3, #48]	; 0x30
 800364a:	e006      	b.n	800365a <xTaskCreate+0x4c>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	0018      	movs	r0, r3
 8003650:	f001 fb62 	bl	8004d18 <vPortFree>
 8003654:	e001      	b.n	800365a <xTaskCreate+0x4c>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d016      	beq.n	800368e <xTaskCreate+0x80>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003660:	1dbb      	adds	r3, r7, #6
 8003662:	881a      	ldrh	r2, [r3, #0]
 8003664:	683c      	ldr	r4, [r7, #0]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	2300      	movs	r3, #0
 800366c:	9303      	str	r3, [sp, #12]
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	9302      	str	r3, [sp, #8]
 8003672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	0023      	movs	r3, r4
 800367c:	f000 f810 	bl	80036a0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	0018      	movs	r0, r3
 8003684:	f000 f8a2 	bl	80037cc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003688:	2301      	movs	r3, #1
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	e002      	b.n	8003694 <xTaskCreate+0x86>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800368e:	2301      	movs	r3, #1
 8003690:	425b      	negs	r3, r3
 8003692:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003694:	69bb      	ldr	r3, [r7, #24]
    }
 8003696:	0018      	movs	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	b009      	add	sp, #36	; 0x24
 800369c:	bd90      	pop	{r4, r7, pc}
	...

080036a0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	001a      	movs	r2, r3
 80036b8:	21a5      	movs	r1, #165	; 0xa5
 80036ba:	f001 fc60 	bl	8004f7e <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4940      	ldr	r1, [pc, #256]	; (80037c8 <prvInitialiseNewTask+0x128>)
 80036c6:	468c      	mov	ip, r1
 80036c8:	4463      	add	r3, ip
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	18d3      	adds	r3, r2, r3
 80036ce:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	2207      	movs	r2, #7
 80036d4:	4393      	bics	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	2207      	movs	r2, #7
 80036dc:	4013      	ands	r3, r2
 80036de:	d001      	beq.n	80036e4 <prvInitialiseNewTask+0x44>
 80036e0:	b672      	cpsid	i
 80036e2:	e7fe      	b.n	80036e2 <prvInitialiseNewTask+0x42>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d020      	beq.n	800372c <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	e013      	b.n	8003718 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	18d3      	adds	r3, r2, r3
 80036f6:	7818      	ldrb	r0, [r3, #0]
 80036f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036fa:	2134      	movs	r1, #52	; 0x34
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	18d3      	adds	r3, r2, r3
 8003700:	185b      	adds	r3, r3, r1
 8003702:	1c02      	adds	r2, r0, #0
 8003704:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	18d3      	adds	r3, r2, r3
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d006      	beq.n	8003720 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	3301      	adds	r3, #1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b0f      	cmp	r3, #15
 800371c:	d9e8      	bls.n	80036f0 <prvInitialiseNewTask+0x50>
 800371e:	e000      	b.n	8003722 <prvInitialiseNewTask+0x82>
            {
                break;
 8003720:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003724:	2243      	movs	r2, #67	; 0x43
 8003726:	2100      	movs	r1, #0
 8003728:	5499      	strb	r1, [r3, r2]
 800372a:	e003      	b.n	8003734 <prvInitialiseNewTask+0x94>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	2234      	movs	r2, #52	; 0x34
 8003730:	2100      	movs	r1, #0
 8003732:	5499      	strb	r1, [r3, r2]
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	2b06      	cmp	r3, #6
 8003738:	d901      	bls.n	800373e <prvInitialiseNewTask+0x9e>
 800373a:	b672      	cpsid	i
 800373c:	e7fe      	b.n	800373c <prvInitialiseNewTask+0x9c>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	2b06      	cmp	r3, #6
 8003742:	d901      	bls.n	8003748 <prvInitialiseNewTask+0xa8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003744:	2306      	movs	r3, #6
 8003746:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374a:	6a3a      	ldr	r2, [r7, #32]
 800374c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	6a3a      	ldr	r2, [r7, #32]
 8003752:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	2200      	movs	r2, #0
 8003758:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375c:	3304      	adds	r3, #4
 800375e:	0018      	movs	r0, r3
 8003760:	f7ff fc18 	bl	8002f94 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003766:	3318      	adds	r3, #24
 8003768:	0018      	movs	r0, r3
 800376a:	f7ff fc13 	bl	8002f94 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003772:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	2207      	movs	r2, #7
 8003778:	1ad2      	subs	r2, r2, r3
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003782:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	3354      	adds	r3, #84	; 0x54
 8003788:	2204      	movs	r2, #4
 800378a:	2100      	movs	r1, #0
 800378c:	0018      	movs	r0, r3
 800378e:	f001 fbf6 	bl	8004f7e <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	3358      	adds	r3, #88	; 0x58
 8003796:	2201      	movs	r2, #1
 8003798:	2100      	movs	r1, #0
 800379a:	0018      	movs	r0, r3
 800379c:	f001 fbef 	bl	8004f7e <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	68f9      	ldr	r1, [r7, #12]
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	0018      	movs	r0, r3
 80037a8:	f001 f8d8 	bl	800495c <pxPortInitialiseStack>
 80037ac:	0002      	movs	r2, r0
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <prvInitialiseNewTask+0x11e>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b006      	add	sp, #24
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	3fffffff 	.word	0x3fffffff

080037cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80037d4:	f001 f95c 	bl	8004a90 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80037d8:	4b3d      	ldr	r3, [pc, #244]	; (80038d0 <prvAddNewTaskToReadyList+0x104>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	4b3c      	ldr	r3, [pc, #240]	; (80038d0 <prvAddNewTaskToReadyList+0x104>)
 80037e0:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 80037e2:	4b3c      	ldr	r3, [pc, #240]	; (80038d4 <prvAddNewTaskToReadyList+0x108>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80037ea:	4b3a      	ldr	r3, [pc, #232]	; (80038d4 <prvAddNewTaskToReadyList+0x108>)
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037f0:	4b37      	ldr	r3, [pc, #220]	; (80038d0 <prvAddNewTaskToReadyList+0x104>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d110      	bne.n	800381a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80037f8:	f000 fd1a 	bl	8004230 <prvInitialiseTaskLists>
 80037fc:	e00d      	b.n	800381a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80037fe:	4b36      	ldr	r3, [pc, #216]	; (80038d8 <prvAddNewTaskToReadyList+0x10c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003806:	4b33      	ldr	r3, [pc, #204]	; (80038d4 <prvAddNewTaskToReadyList+0x108>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	429a      	cmp	r2, r3
 8003812:	d802      	bhi.n	800381a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003814:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <prvAddNewTaskToReadyList+0x108>)
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800381a:	4b30      	ldr	r3, [pc, #192]	; (80038dc <prvAddNewTaskToReadyList+0x110>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	4b2e      	ldr	r3, [pc, #184]	; (80038dc <prvAddNewTaskToReadyList+0x110>)
 8003822:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003824:	4b2d      	ldr	r3, [pc, #180]	; (80038dc <prvAddNewTaskToReadyList+0x110>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003830:	4b2b      	ldr	r3, [pc, #172]	; (80038e0 <prvAddNewTaskToReadyList+0x114>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d903      	bls.n	8003840 <prvAddNewTaskToReadyList+0x74>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383c:	4b28      	ldr	r3, [pc, #160]	; (80038e0 <prvAddNewTaskToReadyList+0x114>)
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003844:	4927      	ldr	r1, [pc, #156]	; (80038e4 <prvAddNewTaskToReadyList+0x118>)
 8003846:	0013      	movs	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	189b      	adds	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	18cb      	adds	r3, r1, r3
 8003850:	3304      	adds	r3, #4
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	60da      	str	r2, [r3, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	3204      	adds	r2, #4
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	1d1a      	adds	r2, r3, #4
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	609a      	str	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387a:	0013      	movs	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	189b      	adds	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4a18      	ldr	r2, [pc, #96]	; (80038e4 <prvAddNewTaskToReadyList+0x118>)
 8003884:	189a      	adds	r2, r3, r2
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	615a      	str	r2, [r3, #20]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388e:	4915      	ldr	r1, [pc, #84]	; (80038e4 <prvAddNewTaskToReadyList+0x118>)
 8003890:	0013      	movs	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	189b      	adds	r3, r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	585b      	ldr	r3, [r3, r1]
 800389a:	1c58      	adds	r0, r3, #1
 800389c:	4911      	ldr	r1, [pc, #68]	; (80038e4 <prvAddNewTaskToReadyList+0x118>)
 800389e:	0013      	movs	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	189b      	adds	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80038a8:	f001 f904 	bl	8004ab4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80038ac:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <prvAddNewTaskToReadyList+0x10c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038b4:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <prvAddNewTaskToReadyList+0x108>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	429a      	cmp	r2, r3
 80038c0:	d201      	bcs.n	80038c6 <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80038c2:	f001 f8d5 	bl	8004a70 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b004      	add	sp, #16
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	20000254 	.word	0x20000254
 80038d4:	20000154 	.word	0x20000154
 80038d8:	20000260 	.word	0x20000260
 80038dc:	20000270 	.word	0x20000270
 80038e0:	2000025c 	.word	0x2000025c
 80038e4:	20000158 	.word	0x20000158

080038e8 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <xTaskDelayUntil+0x18>
 80038fc:	b672      	cpsid	i
 80038fe:	e7fe      	b.n	80038fe <xTaskDelayUntil+0x16>
        configASSERT( ( xTimeIncrement > 0U ) );
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <xTaskDelayUntil+0x22>
 8003906:	b672      	cpsid	i
 8003908:	e7fe      	b.n	8003908 <xTaskDelayUntil+0x20>
        configASSERT( uxSchedulerSuspended == 0 );
 800390a:	4b23      	ldr	r3, [pc, #140]	; (8003998 <xTaskDelayUntil+0xb0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <xTaskDelayUntil+0x2e>
 8003912:	b672      	cpsid	i
 8003914:	e7fe      	b.n	8003914 <xTaskDelayUntil+0x2c>

        vTaskSuspendAll();
 8003916:	f000 f883 	bl	8003a20 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800391a:	4b20      	ldr	r3, [pc, #128]	; (800399c <xTaskDelayUntil+0xb4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	18d3      	adds	r3, r2, r3
 8003928:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	429a      	cmp	r2, r3
 8003932:	d20b      	bcs.n	800394c <xTaskDelayUntil+0x64>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	429a      	cmp	r2, r3
 800393c:	d211      	bcs.n	8003962 <xTaskDelayUntil+0x7a>
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	429a      	cmp	r2, r3
 8003944:	d90d      	bls.n	8003962 <xTaskDelayUntil+0x7a>
                {
                    xShouldDelay = pdTRUE;
 8003946:	2301      	movs	r3, #1
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	e00a      	b.n	8003962 <xTaskDelayUntil+0x7a>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	429a      	cmp	r2, r3
 8003954:	d303      	bcc.n	800395e <xTaskDelayUntil+0x76>
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	429a      	cmp	r2, r3
 800395c:	d901      	bls.n	8003962 <xTaskDelayUntil+0x7a>
                {
                    xShouldDelay = pdTRUE;
 800395e:	2301      	movs	r3, #1
 8003960:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d006      	beq.n	800397c <xTaskDelayUntil+0x94>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2100      	movs	r1, #0
 8003976:	0018      	movs	r0, r3
 8003978:	f000 fd14 	bl	80043a4 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800397c:	f000 f85c 	bl	8003a38 <xTaskResumeAll>
 8003980:	0003      	movs	r3, r0
 8003982:	60bb      	str	r3, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <xTaskDelayUntil+0xa6>
        {
            portYIELD_WITHIN_API();
 800398a:	f001 f871 	bl	8004a70 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 800398e:	697b      	ldr	r3, [r7, #20]
    }
 8003990:	0018      	movs	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	b006      	add	sp, #24
 8003996:	bd80      	pop	{r7, pc}
 8003998:	2000027c 	.word	0x2000027c
 800399c:	20000258 	.word	0x20000258

080039a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80039a6:	4917      	ldr	r1, [pc, #92]	; (8003a04 <vTaskStartScheduler+0x64>)
 80039a8:	4817      	ldr	r0, [pc, #92]	; (8003a08 <vTaskStartScheduler+0x68>)
 80039aa:	4b18      	ldr	r3, [pc, #96]	; (8003a0c <vTaskStartScheduler+0x6c>)
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	2300      	movs	r3, #0
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	2300      	movs	r3, #0
 80039b4:	2280      	movs	r2, #128	; 0x80
 80039b6:	f7ff fe2a 	bl	800360e <xTaskCreate>
 80039ba:	0003      	movs	r3, r0
 80039bc:	607b      	str	r3, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d103      	bne.n	80039cc <vTaskStartScheduler+0x2c>
            {
                xReturn = xTimerCreateTimerTask();
 80039c4:	f000 fd5c 	bl	8004480 <xTimerCreateTimerTask>
 80039c8:	0003      	movs	r3, r0
 80039ca:	607b      	str	r3, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d10d      	bne.n	80039ee <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 80039d2:	b672      	cpsid	i
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80039d4:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <vTaskStartScheduler+0x70>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	4252      	negs	r2, r2
 80039da:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80039dc:	4b0d      	ldr	r3, [pc, #52]	; (8003a14 <vTaskStartScheduler+0x74>)
 80039de:	2201      	movs	r2, #1
 80039e0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039e2:	4b0d      	ldr	r3, [pc, #52]	; (8003a18 <vTaskStartScheduler+0x78>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80039e8:	f001 f81e 	bl	8004a28 <xPortStartScheduler>
 80039ec:	e004      	b.n	80039f8 <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3301      	adds	r3, #1
 80039f2:	d101      	bne.n	80039f8 <vTaskStartScheduler+0x58>
 80039f4:	b672      	cpsid	i
 80039f6:	e7fe      	b.n	80039f6 <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80039f8:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <vTaskStartScheduler+0x7c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	46c0      	nop			; (mov r8, r8)
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b002      	add	sp, #8
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	08004fac 	.word	0x08004fac
 8003a08:	08004211 	.word	0x08004211
 8003a0c:	20000278 	.word	0x20000278
 8003a10:	20000274 	.word	0x20000274
 8003a14:	20000260 	.word	0x20000260
 8003a18:	20000258 	.word	0x20000258
 8003a1c:	2000000c 	.word	0x2000000c

08003a20 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003a24:	4b03      	ldr	r3, [pc, #12]	; (8003a34 <vTaskSuspendAll+0x14>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	4b02      	ldr	r3, [pc, #8]	; (8003a34 <vTaskSuspendAll+0x14>)
 8003a2c:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	2000027c 	.word	0x2000027c

08003a38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003a42:	2300      	movs	r3, #0
 8003a44:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003a46:	4b68      	ldr	r3, [pc, #416]	; (8003be8 <xTaskResumeAll+0x1b0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <xTaskResumeAll+0x1a>
 8003a4e:	b672      	cpsid	i
 8003a50:	e7fe      	b.n	8003a50 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003a52:	f001 f81d 	bl	8004a90 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003a56:	4b64      	ldr	r3, [pc, #400]	; (8003be8 <xTaskResumeAll+0x1b0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	1e5a      	subs	r2, r3, #1
 8003a5c:	4b62      	ldr	r3, [pc, #392]	; (8003be8 <xTaskResumeAll+0x1b0>)
 8003a5e:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a60:	4b61      	ldr	r3, [pc, #388]	; (8003be8 <xTaskResumeAll+0x1b0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d000      	beq.n	8003a6a <xTaskResumeAll+0x32>
 8003a68:	e0b7      	b.n	8003bda <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a6a:	4b60      	ldr	r3, [pc, #384]	; (8003bec <xTaskResumeAll+0x1b4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d100      	bne.n	8003a74 <xTaskResumeAll+0x3c>
 8003a72:	e0b2      	b.n	8003bda <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a74:	e089      	b.n	8003b8a <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a76:	4b5e      	ldr	r3, [pc, #376]	; (8003bf0 <xTaskResumeAll+0x1b8>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	6a12      	ldr	r2, [r2, #32]
 8003a8c:	609a      	str	r2, [r3, #8]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	69d2      	ldr	r2, [r2, #28]
 8003a96:	605a      	str	r2, [r3, #4]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	3318      	adds	r3, #24
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d103      	bne.n	8003aac <xTaskResumeAll+0x74>
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	6a1a      	ldr	r2, [r3, #32]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	1e5a      	subs	r2, r3, #1
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	68d2      	ldr	r2, [r2, #12]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	6892      	ldr	r2, [r2, #8]
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	3304      	adds	r3, #4
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d103      	bne.n	8003aea <xTaskResumeAll+0xb2>
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	605a      	str	r2, [r3, #4]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2200      	movs	r2, #0
 8003aee:	615a      	str	r2, [r3, #20]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	1e5a      	subs	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afe:	4b3d      	ldr	r3, [pc, #244]	; (8003bf4 <xTaskResumeAll+0x1bc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d903      	bls.n	8003b0e <xTaskResumeAll+0xd6>
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0a:	4b3a      	ldr	r3, [pc, #232]	; (8003bf4 <xTaskResumeAll+0x1bc>)
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b12:	4939      	ldr	r1, [pc, #228]	; (8003bf8 <xTaskResumeAll+0x1c0>)
 8003b14:	0013      	movs	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	189b      	adds	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	18cb      	adds	r3, r1, r3
 8003b1e:	3304      	adds	r3, #4
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	609a      	str	r2, [r3, #8]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	60da      	str	r2, [r3, #12]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	3204      	adds	r2, #4
 8003b3a:	605a      	str	r2, [r3, #4]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	1d1a      	adds	r2, r3, #4
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b48:	0013      	movs	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	189b      	adds	r3, r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4a29      	ldr	r2, [pc, #164]	; (8003bf8 <xTaskResumeAll+0x1c0>)
 8003b52:	189a      	adds	r2, r3, r2
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	615a      	str	r2, [r3, #20]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5c:	4926      	ldr	r1, [pc, #152]	; (8003bf8 <xTaskResumeAll+0x1c0>)
 8003b5e:	0013      	movs	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	189b      	adds	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	585b      	ldr	r3, [r3, r1]
 8003b68:	1c58      	adds	r0, r3, #1
 8003b6a:	4923      	ldr	r1, [pc, #140]	; (8003bf8 <xTaskResumeAll+0x1c0>)
 8003b6c:	0013      	movs	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	189b      	adds	r3, r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7a:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <xTaskResumeAll+0x1c4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d302      	bcc.n	8003b8a <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 8003b84:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <xTaskResumeAll+0x1c8>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b8a:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <xTaskResumeAll+0x1b8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d000      	beq.n	8003b94 <xTaskResumeAll+0x15c>
 8003b92:	e770      	b.n	8003a76 <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003b9a:	f000 fbcd 	bl	8004338 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b9e:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <xTaskResumeAll+0x1cc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00f      	beq.n	8003bca <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003baa:	f000 f83b 	bl	8003c24 <xTaskIncrementTick>
 8003bae:	1e03      	subs	r3, r0, #0
 8003bb0:	d002      	beq.n	8003bb8 <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 8003bb2:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <xTaskResumeAll+0x1c8>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f2      	bne.n	8003baa <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <xTaskResumeAll+0x1cc>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003bca:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <xTaskResumeAll+0x1c8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003bd6:	f000 ff4b 	bl	8004a70 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003bda:	f000 ff6b 	bl	8004ab4 <vPortExitCritical>

    return xAlreadyYielded;
 8003bde:	693b      	ldr	r3, [r7, #16]
}
 8003be0:	0018      	movs	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b006      	add	sp, #24
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	2000027c 	.word	0x2000027c
 8003bec:	20000254 	.word	0x20000254
 8003bf0:	20000214 	.word	0x20000214
 8003bf4:	2000025c 	.word	0x2000025c
 8003bf8:	20000158 	.word	0x20000158
 8003bfc:	20000154 	.word	0x20000154
 8003c00:	20000268 	.word	0x20000268
 8003c04:	20000264 	.word	0x20000264

08003c08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003c0e:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <xTaskGetTickCount+0x18>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003c14:	687b      	ldr	r3, [r7, #4]
}
 8003c16:	0018      	movs	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	b002      	add	sp, #8
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	20000258 	.word	0x20000258

08003c24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c2e:	4b78      	ldr	r3, [pc, #480]	; (8003e10 <xTaskIncrementTick+0x1ec>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d000      	beq.n	8003c38 <xTaskIncrementTick+0x14>
 8003c36:	e0e0      	b.n	8003dfa <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c38:	4b76      	ldr	r3, [pc, #472]	; (8003e14 <xTaskIncrementTick+0x1f0>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003c40:	4b74      	ldr	r3, [pc, #464]	; (8003e14 <xTaskIncrementTick+0x1f0>)
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d117      	bne.n	8003c7c <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 8003c4c:	4b72      	ldr	r3, [pc, #456]	; (8003e18 <xTaskIncrementTick+0x1f4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <xTaskIncrementTick+0x36>
 8003c56:	b672      	cpsid	i
 8003c58:	e7fe      	b.n	8003c58 <xTaskIncrementTick+0x34>
 8003c5a:	4b6f      	ldr	r3, [pc, #444]	; (8003e18 <xTaskIncrementTick+0x1f4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	4b6e      	ldr	r3, [pc, #440]	; (8003e1c <xTaskIncrementTick+0x1f8>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b6c      	ldr	r3, [pc, #432]	; (8003e18 <xTaskIncrementTick+0x1f4>)
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	4b6c      	ldr	r3, [pc, #432]	; (8003e1c <xTaskIncrementTick+0x1f8>)
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	4b6c      	ldr	r3, [pc, #432]	; (8003e20 <xTaskIncrementTick+0x1fc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	4b6a      	ldr	r3, [pc, #424]	; (8003e20 <xTaskIncrementTick+0x1fc>)
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	f000 fb5e 	bl	8004338 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003c7c:	4b69      	ldr	r3, [pc, #420]	; (8003e24 <xTaskIncrementTick+0x200>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d200      	bcs.n	8003c88 <xTaskIncrementTick+0x64>
 8003c86:	e0a4      	b.n	8003dd2 <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c88:	4b63      	ldr	r3, [pc, #396]	; (8003e18 <xTaskIncrementTick+0x1f4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d104      	bne.n	8003c9c <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c92:	4b64      	ldr	r3, [pc, #400]	; (8003e24 <xTaskIncrementTick+0x200>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	4252      	negs	r2, r2
 8003c98:	601a      	str	r2, [r3, #0]
                    break;
 8003c9a:	e09a      	b.n	8003dd2 <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c9c:	4b5e      	ldr	r3, [pc, #376]	; (8003e18 <xTaskIncrementTick+0x1f4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d203      	bcs.n	8003cbc <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003cb4:	4b5b      	ldr	r3, [pc, #364]	; (8003e24 <xTaskIncrementTick+0x200>)
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003cba:	e08a      	b.n	8003dd2 <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	68d2      	ldr	r2, [r2, #12]
 8003cca:	609a      	str	r2, [r3, #8]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	6892      	ldr	r2, [r2, #8]
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d103      	bne.n	8003cea <xTaskIncrementTick+0xc6>
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	605a      	str	r2, [r3, #4]
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2200      	movs	r2, #0
 8003cee:	615a      	str	r2, [r3, #20]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	1e5a      	subs	r2, r3, #1
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01e      	beq.n	8003d40 <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	607b      	str	r3, [r7, #4]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	6a12      	ldr	r2, [r2, #32]
 8003d10:	609a      	str	r2, [r3, #8]
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	69d2      	ldr	r2, [r2, #28]
 8003d1a:	605a      	str	r2, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	3318      	adds	r3, #24
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d103      	bne.n	8003d30 <xTaskIncrementTick+0x10c>
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	6a1a      	ldr	r2, [r3, #32]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2200      	movs	r2, #0
 8003d34:	629a      	str	r2, [r3, #40]	; 0x28
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	1e5a      	subs	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d44:	4b38      	ldr	r3, [pc, #224]	; (8003e28 <xTaskIncrementTick+0x204>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d903      	bls.n	8003d54 <xTaskIncrementTick+0x130>
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d50:	4b35      	ldr	r3, [pc, #212]	; (8003e28 <xTaskIncrementTick+0x204>)
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d58:	4934      	ldr	r1, [pc, #208]	; (8003e2c <xTaskIncrementTick+0x208>)
 8003d5a:	0013      	movs	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	189b      	adds	r3, r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	18cb      	adds	r3, r1, r3
 8003d64:	3304      	adds	r3, #4
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	603b      	str	r3, [r7, #0]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	60da      	str	r2, [r3, #12]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	3204      	adds	r2, #4
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1d1a      	adds	r2, r3, #4
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	609a      	str	r2, [r3, #8]
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8e:	0013      	movs	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	189b      	adds	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4a25      	ldr	r2, [pc, #148]	; (8003e2c <xTaskIncrementTick+0x208>)
 8003d98:	189a      	adds	r2, r3, r2
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	615a      	str	r2, [r3, #20]
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da2:	4922      	ldr	r1, [pc, #136]	; (8003e2c <xTaskIncrementTick+0x208>)
 8003da4:	0013      	movs	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	189b      	adds	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	585b      	ldr	r3, [r3, r1]
 8003dae:	1c58      	adds	r0, r3, #1
 8003db0:	491e      	ldr	r1, [pc, #120]	; (8003e2c <xTaskIncrementTick+0x208>)
 8003db2:	0013      	movs	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	189b      	adds	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	5058      	str	r0, [r3, r1]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <xTaskIncrementTick+0x20c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d200      	bcs.n	8003dcc <xTaskIncrementTick+0x1a8>
 8003dca:	e75d      	b.n	8003c88 <xTaskIncrementTick+0x64>
                            {
                                xSwitchRequired = pdTRUE;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dd0:	e75a      	b.n	8003c88 <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003dd2:	4b17      	ldr	r3, [pc, #92]	; (8003e30 <xTaskIncrementTick+0x20c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd8:	4914      	ldr	r1, [pc, #80]	; (8003e2c <xTaskIncrementTick+0x208>)
 8003dda:	0013      	movs	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	189b      	adds	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	585b      	ldr	r3, [r3, r1]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d901      	bls.n	8003dec <xTaskIncrementTick+0x1c8>
                {
                    xSwitchRequired = pdTRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003dec:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <xTaskIncrementTick+0x210>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <xTaskIncrementTick+0x1e0>
                {
                    xSwitchRequired = pdTRUE;
 8003df4:	2301      	movs	r3, #1
 8003df6:	61fb      	str	r3, [r7, #28]
 8003df8:	e004      	b.n	8003e04 <xTaskIncrementTick+0x1e0>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <xTaskIncrementTick+0x214>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	4b0d      	ldr	r3, [pc, #52]	; (8003e38 <xTaskIncrementTick+0x214>)
 8003e02:	601a      	str	r2, [r3, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003e04:	69fb      	ldr	r3, [r7, #28]
}
 8003e06:	0018      	movs	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b008      	add	sp, #32
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	2000027c 	.word	0x2000027c
 8003e14:	20000258 	.word	0x20000258
 8003e18:	2000020c 	.word	0x2000020c
 8003e1c:	20000210 	.word	0x20000210
 8003e20:	2000026c 	.word	0x2000026c
 8003e24:	20000274 	.word	0x20000274
 8003e28:	2000025c 	.word	0x2000025c
 8003e2c:	20000158 	.word	0x20000158
 8003e30:	20000154 	.word	0x20000154
 8003e34:	20000268 	.word	0x20000268
 8003e38:	20000264 	.word	0x20000264

08003e3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e42:	4b22      	ldr	r3, [pc, #136]	; (8003ecc <vTaskSwitchContext+0x90>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003e4a:	4b21      	ldr	r3, [pc, #132]	; (8003ed0 <vTaskSwitchContext+0x94>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003e50:	e037      	b.n	8003ec2 <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 8003e52:	4b1f      	ldr	r3, [pc, #124]	; (8003ed0 <vTaskSwitchContext+0x94>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e58:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <vTaskSwitchContext+0x98>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	e007      	b.n	8003e70 <vTaskSwitchContext+0x34>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <vTaskSwitchContext+0x2e>
 8003e66:	b672      	cpsid	i
 8003e68:	e7fe      	b.n	8003e68 <vTaskSwitchContext+0x2c>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	4919      	ldr	r1, [pc, #100]	; (8003ed8 <vTaskSwitchContext+0x9c>)
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	0013      	movs	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	189b      	adds	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	585b      	ldr	r3, [r3, r1]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0ee      	beq.n	8003e60 <vTaskSwitchContext+0x24>
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	0013      	movs	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	189b      	adds	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4a12      	ldr	r2, [pc, #72]	; (8003ed8 <vTaskSwitchContext+0x9c>)
 8003e8e:	189b      	adds	r3, r3, r2
 8003e90:	603b      	str	r3, [r7, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	605a      	str	r2, [r3, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d104      	bne.n	8003eb2 <vTaskSwitchContext+0x76>
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <vTaskSwitchContext+0xa0>)
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <vTaskSwitchContext+0x98>)
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	601a      	str	r2, [r3, #0]
}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b002      	add	sp, #8
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	2000027c 	.word	0x2000027c
 8003ed0:	20000268 	.word	0x20000268
 8003ed4:	2000025c 	.word	0x2000025c
 8003ed8:	20000158 	.word	0x20000158
 8003edc:	20000154 	.word	0x20000154

08003ee0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <vTaskPlaceOnEventList+0x14>
 8003ef0:	b672      	cpsid	i
 8003ef2:	e7fe      	b.n	8003ef2 <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ef4:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <vTaskPlaceOnEventList+0x38>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3318      	adds	r3, #24
 8003efa:	001a      	movs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	0011      	movs	r1, r2
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7ff f852 	bl	8002faa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2101      	movs	r1, #1
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f000 fa4a 	bl	80043a4 <prvAddCurrentTaskToDelayedList>
}
 8003f10:	46c0      	nop			; (mov r8, r8)
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b002      	add	sp, #8
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20000154 	.word	0x20000154

08003f1c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <vTaskPlaceOnEventListRestricted+0x16>
 8003f2e:	b672      	cpsid	i
 8003f30:	e7fe      	b.n	8003f30 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	4b16      	ldr	r3, [pc, #88]	; (8003f94 <vTaskPlaceOnEventListRestricted+0x78>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	61da      	str	r2, [r3, #28]
 8003f40:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <vTaskPlaceOnEventListRestricted+0x78>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	6892      	ldr	r2, [r2, #8]
 8003f48:	621a      	str	r2, [r3, #32]
 8003f4a:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <vTaskPlaceOnEventListRestricted+0x78>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	3218      	adds	r2, #24
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <vTaskPlaceOnEventListRestricted+0x78>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3318      	adds	r3, #24
 8003f5c:	001a      	movs	r2, r3
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	609a      	str	r2, [r3, #8]
 8003f62:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <vTaskPlaceOnEventListRestricted+0x78>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	629a      	str	r2, [r3, #40]	; 0x28
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <vTaskPlaceOnEventListRestricted+0x64>
        {
            xTicksToWait = portMAX_DELAY;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	425b      	negs	r3, r3
 8003f7e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	0011      	movs	r1, r2
 8003f86:	0018      	movs	r0, r3
 8003f88:	f000 fa0c 	bl	80043a4 <prvAddCurrentTaskToDelayedList>
    }
 8003f8c:	46c0      	nop			; (mov r8, r8)
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b006      	add	sp, #24
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000154 	.word	0x20000154

08003f98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <xTaskRemoveFromEventList+0x1a>
 8003fae:	b672      	cpsid	i
 8003fb0:	e7fe      	b.n	8003fb0 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	6a12      	ldr	r2, [r2, #32]
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	69d2      	ldr	r2, [r2, #28]
 8003fca:	605a      	str	r2, [r3, #4]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	3318      	adds	r3, #24
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d103      	bne.n	8003fe0 <xTaskRemoveFromEventList+0x48>
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	6a1a      	ldr	r2, [r3, #32]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	605a      	str	r2, [r3, #4]
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	629a      	str	r2, [r3, #40]	; 0x28
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	1e5a      	subs	r2, r3, #1
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ff0:	4b48      	ldr	r3, [pc, #288]	; (8004114 <xTaskRemoveFromEventList+0x17c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d15d      	bne.n	80040b4 <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	68d2      	ldr	r2, [r2, #12]
 8004006:	609a      	str	r2, [r3, #8]
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	6892      	ldr	r2, [r2, #8]
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	3304      	adds	r3, #4
 800401a:	429a      	cmp	r2, r3
 800401c:	d103      	bne.n	8004026 <xTaskRemoveFromEventList+0x8e>
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2200      	movs	r2, #0
 800402a:	615a      	str	r2, [r3, #20]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	1e5a      	subs	r2, r3, #1
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403a:	4b37      	ldr	r3, [pc, #220]	; (8004118 <xTaskRemoveFromEventList+0x180>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d903      	bls.n	800404a <xTaskRemoveFromEventList+0xb2>
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004046:	4b34      	ldr	r3, [pc, #208]	; (8004118 <xTaskRemoveFromEventList+0x180>)
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404e:	4933      	ldr	r1, [pc, #204]	; (800411c <xTaskRemoveFromEventList+0x184>)
 8004050:	0013      	movs	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	189b      	adds	r3, r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	18cb      	adds	r3, r1, r3
 800405a:	3304      	adds	r3, #4
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	609a      	str	r2, [r3, #8]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	3204      	adds	r2, #4
 8004076:	605a      	str	r2, [r3, #4]
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	1d1a      	adds	r2, r3, #4
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	0013      	movs	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	189b      	adds	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4a23      	ldr	r2, [pc, #140]	; (800411c <xTaskRemoveFromEventList+0x184>)
 800408e:	189a      	adds	r2, r3, r2
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	615a      	str	r2, [r3, #20]
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004098:	4920      	ldr	r1, [pc, #128]	; (800411c <xTaskRemoveFromEventList+0x184>)
 800409a:	0013      	movs	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	189b      	adds	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	585b      	ldr	r3, [r3, r1]
 80040a4:	1c58      	adds	r0, r3, #1
 80040a6:	491d      	ldr	r1, [pc, #116]	; (800411c <xTaskRemoveFromEventList+0x184>)
 80040a8:	0013      	movs	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	189b      	adds	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	5058      	str	r0, [r3, r1]
 80040b2:	e01b      	b.n	80040ec <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040b4:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <xTaskRemoveFromEventList+0x188>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	61da      	str	r2, [r3, #28]
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	621a      	str	r2, [r3, #32]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	3218      	adds	r2, #24
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	3318      	adds	r3, #24
 80040d6:	001a      	movs	r2, r3
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	4a10      	ldr	r2, [pc, #64]	; (8004120 <xTaskRemoveFromEventList+0x188>)
 80040e0:	629a      	str	r2, [r3, #40]	; 0x28
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <xTaskRemoveFromEventList+0x188>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <xTaskRemoveFromEventList+0x188>)
 80040ea:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f0:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <xTaskRemoveFromEventList+0x18c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d905      	bls.n	8004106 <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80040fa:	2301      	movs	r3, #1
 80040fc:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80040fe:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <xTaskRemoveFromEventList+0x190>)
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	e001      	b.n	800410a <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 8004106:	2300      	movs	r3, #0
 8004108:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800410a:	69fb      	ldr	r3, [r7, #28]
}
 800410c:	0018      	movs	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	b008      	add	sp, #32
 8004112:	bd80      	pop	{r7, pc}
 8004114:	2000027c 	.word	0x2000027c
 8004118:	2000025c 	.word	0x2000025c
 800411c:	20000158 	.word	0x20000158
 8004120:	20000214 	.word	0x20000214
 8004124:	20000154 	.word	0x20000154
 8004128:	20000268 	.word	0x20000268

0800412c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <vTaskInternalSetTimeOutState+0x20>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800413c:	4b04      	ldr	r3, [pc, #16]	; (8004150 <vTaskInternalSetTimeOutState+0x24>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	605a      	str	r2, [r3, #4]
}
 8004144:	46c0      	nop			; (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	b002      	add	sp, #8
 800414a:	bd80      	pop	{r7, pc}
 800414c:	2000026c 	.word	0x2000026c
 8004150:	20000258 	.word	0x20000258

08004154 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <xTaskCheckForTimeOut+0x14>
 8004164:	b672      	cpsid	i
 8004166:	e7fe      	b.n	8004166 <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <xTaskCheckForTimeOut+0x1e>
 800416e:	b672      	cpsid	i
 8004170:	e7fe      	b.n	8004170 <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 8004172:	f000 fc8d 	bl	8004a90 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004176:	4b1f      	ldr	r3, [pc, #124]	; (80041f4 <xTaskCheckForTimeOut+0xa0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3301      	adds	r3, #1
 800418c:	d102      	bne.n	8004194 <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	e027      	b.n	80041e4 <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4b17      	ldr	r3, [pc, #92]	; (80041f8 <xTaskCheckForTimeOut+0xa4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d00a      	beq.n	80041b6 <xTaskCheckForTimeOut+0x62>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d305      	bcc.n	80041b6 <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80041aa:	2301      	movs	r3, #1
 80041ac:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	e016      	b.n	80041e4 <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d20c      	bcs.n	80041da <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	1ad2      	subs	r2, r2, r3
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	0018      	movs	r0, r3
 80041d0:	f7ff ffac 	bl	800412c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	e004      	b.n	80041e4 <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80041e0:	2301      	movs	r3, #1
 80041e2:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80041e4:	f000 fc66 	bl	8004ab4 <vPortExitCritical>

    return xReturn;
 80041e8:	697b      	ldr	r3, [r7, #20]
}
 80041ea:	0018      	movs	r0, r3
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b006      	add	sp, #24
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	20000258 	.word	0x20000258
 80041f8:	2000026c 	.word	0x2000026c

080041fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004200:	4b02      	ldr	r3, [pc, #8]	; (800420c <vTaskMissedYield+0x10>)
 8004202:	2201      	movs	r2, #1
 8004204:	601a      	str	r2, [r3, #0]
}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20000268 	.word	0x20000268

08004210 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004218:	f000 f84e 	bl	80042b8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800421c:	4b03      	ldr	r3, [pc, #12]	; (800422c <prvIdleTask+0x1c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d9f9      	bls.n	8004218 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004224:	f000 fc24 	bl	8004a70 <vPortYield>
        prvCheckTasksWaitingTermination();
 8004228:	e7f6      	b.n	8004218 <prvIdleTask+0x8>
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	20000158 	.word	0x20000158

08004230 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004236:	2300      	movs	r3, #0
 8004238:	607b      	str	r3, [r7, #4]
 800423a:	e00c      	b.n	8004256 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	0013      	movs	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	189b      	adds	r3, r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4a14      	ldr	r2, [pc, #80]	; (8004298 <prvInitialiseTaskLists+0x68>)
 8004248:	189b      	adds	r3, r3, r2
 800424a:	0018      	movs	r0, r3
 800424c:	f7fe fe84 	bl	8002f58 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3301      	adds	r3, #1
 8004254:	607b      	str	r3, [r7, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b06      	cmp	r3, #6
 800425a:	d9ef      	bls.n	800423c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800425c:	4b0f      	ldr	r3, [pc, #60]	; (800429c <prvInitialiseTaskLists+0x6c>)
 800425e:	0018      	movs	r0, r3
 8004260:	f7fe fe7a 	bl	8002f58 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004264:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <prvInitialiseTaskLists+0x70>)
 8004266:	0018      	movs	r0, r3
 8004268:	f7fe fe76 	bl	8002f58 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800426c:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <prvInitialiseTaskLists+0x74>)
 800426e:	0018      	movs	r0, r3
 8004270:	f7fe fe72 	bl	8002f58 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004274:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <prvInitialiseTaskLists+0x78>)
 8004276:	0018      	movs	r0, r3
 8004278:	f7fe fe6e 	bl	8002f58 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <prvInitialiseTaskLists+0x7c>)
 800427e:	0018      	movs	r0, r3
 8004280:	f7fe fe6a 	bl	8002f58 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004284:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <prvInitialiseTaskLists+0x80>)
 8004286:	4a05      	ldr	r2, [pc, #20]	; (800429c <prvInitialiseTaskLists+0x6c>)
 8004288:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800428a:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <prvInitialiseTaskLists+0x84>)
 800428c:	4a04      	ldr	r2, [pc, #16]	; (80042a0 <prvInitialiseTaskLists+0x70>)
 800428e:	601a      	str	r2, [r3, #0]
}
 8004290:	46c0      	nop			; (mov r8, r8)
 8004292:	46bd      	mov	sp, r7
 8004294:	b002      	add	sp, #8
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000158 	.word	0x20000158
 800429c:	200001e4 	.word	0x200001e4
 80042a0:	200001f8 	.word	0x200001f8
 80042a4:	20000214 	.word	0x20000214
 80042a8:	20000228 	.word	0x20000228
 80042ac:	20000240 	.word	0x20000240
 80042b0:	2000020c 	.word	0x2000020c
 80042b4:	20000210 	.word	0x20000210

080042b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042be:	e01a      	b.n	80042f6 <prvCheckTasksWaitingTermination+0x3e>
            {
                taskENTER_CRITICAL();
 80042c0:	f000 fbe6 	bl	8004a90 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042c4:	4b10      	ldr	r3, [pc, #64]	; (8004308 <prvCheckTasksWaitingTermination+0x50>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3304      	adds	r3, #4
 80042d0:	0018      	movs	r0, r3
 80042d2:	f7fe fea0 	bl	8003016 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80042d6:	4b0d      	ldr	r3, [pc, #52]	; (800430c <prvCheckTasksWaitingTermination+0x54>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	1e5a      	subs	r2, r3, #1
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <prvCheckTasksWaitingTermination+0x54>)
 80042de:	601a      	str	r2, [r3, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80042e0:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <prvCheckTasksWaitingTermination+0x58>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	1e5a      	subs	r2, r3, #1
 80042e6:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <prvCheckTasksWaitingTermination+0x58>)
 80042e8:	601a      	str	r2, [r3, #0]
                }
                taskEXIT_CRITICAL();
 80042ea:	f000 fbe3 	bl	8004ab4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	0018      	movs	r0, r3
 80042f2:	f000 f80f 	bl	8004314 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042f6:	4b06      	ldr	r3, [pc, #24]	; (8004310 <prvCheckTasksWaitingTermination+0x58>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e0      	bne.n	80042c0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	46c0      	nop			; (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	b002      	add	sp, #8
 8004306:	bd80      	pop	{r7, pc}
 8004308:	20000228 	.word	0x20000228
 800430c:	20000254 	.word	0x20000254
 8004310:	2000023c 	.word	0x2000023c

08004314 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004320:	0018      	movs	r0, r3
 8004322:	f000 fcf9 	bl	8004d18 <vPortFree>
                vPortFree( pxTCB );
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	0018      	movs	r0, r3
 800432a:	f000 fcf5 	bl	8004d18 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	46bd      	mov	sp, r7
 8004332:	b002      	add	sp, #8
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800433c:	4b09      	ldr	r3, [pc, #36]	; (8004364 <prvResetNextTaskUnblockTime+0x2c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d104      	bne.n	8004350 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004346:	4b08      	ldr	r3, [pc, #32]	; (8004368 <prvResetNextTaskUnblockTime+0x30>)
 8004348:	2201      	movs	r2, #1
 800434a:	4252      	negs	r2, r2
 800434c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800434e:	e005      	b.n	800435c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004350:	4b04      	ldr	r3, [pc, #16]	; (8004364 <prvResetNextTaskUnblockTime+0x2c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4b03      	ldr	r3, [pc, #12]	; (8004368 <prvResetNextTaskUnblockTime+0x30>)
 800435a:	601a      	str	r2, [r3, #0]
}
 800435c:	46c0      	nop			; (mov r8, r8)
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	2000020c 	.word	0x2000020c
 8004368:	20000274 	.word	0x20000274

0800436c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004372:	4b0a      	ldr	r3, [pc, #40]	; (800439c <xTaskGetSchedulerState+0x30>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d102      	bne.n	8004380 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800437a:	2301      	movs	r3, #1
 800437c:	607b      	str	r3, [r7, #4]
 800437e:	e008      	b.n	8004392 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004380:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <xTaskGetSchedulerState+0x34>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d102      	bne.n	800438e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004388:	2302      	movs	r3, #2
 800438a:	607b      	str	r3, [r7, #4]
 800438c:	e001      	b.n	8004392 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800438e:	2300      	movs	r3, #0
 8004390:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004392:	687b      	ldr	r3, [r7, #4]
    }
 8004394:	0018      	movs	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	b002      	add	sp, #8
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20000260 	.word	0x20000260
 80043a0:	2000027c 	.word	0x2000027c

080043a4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80043ae:	4b2e      	ldr	r3, [pc, #184]	; (8004468 <prvAddCurrentTaskToDelayedList+0xc4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043b4:	4b2d      	ldr	r3, [pc, #180]	; (800446c <prvAddCurrentTaskToDelayedList+0xc8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3304      	adds	r3, #4
 80043ba:	0018      	movs	r0, r3
 80043bc:	f7fe fe2b 	bl	8003016 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3301      	adds	r3, #1
 80043c4:	d124      	bne.n	8004410 <prvAddCurrentTaskToDelayedList+0x6c>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d021      	beq.n	8004410 <prvAddCurrentTaskToDelayedList+0x6c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043cc:	4b28      	ldr	r3, [pc, #160]	; (8004470 <prvAddCurrentTaskToDelayedList+0xcc>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	4b26      	ldr	r3, [pc, #152]	; (800446c <prvAddCurrentTaskToDelayedList+0xc8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	609a      	str	r2, [r3, #8]
 80043da:	4b24      	ldr	r3, [pc, #144]	; (800446c <prvAddCurrentTaskToDelayedList+0xc8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	6892      	ldr	r2, [r2, #8]
 80043e2:	60da      	str	r2, [r3, #12]
 80043e4:	4b21      	ldr	r3, [pc, #132]	; (800446c <prvAddCurrentTaskToDelayedList+0xc8>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	3204      	adds	r2, #4
 80043ee:	605a      	str	r2, [r3, #4]
 80043f0:	4b1e      	ldr	r3, [pc, #120]	; (800446c <prvAddCurrentTaskToDelayedList+0xc8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	1d1a      	adds	r2, r3, #4
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	609a      	str	r2, [r3, #8]
 80043fa:	4b1c      	ldr	r3, [pc, #112]	; (800446c <prvAddCurrentTaskToDelayedList+0xc8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a1c      	ldr	r2, [pc, #112]	; (8004470 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004400:	615a      	str	r2, [r3, #20]
 8004402:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	4b19      	ldr	r3, [pc, #100]	; (8004470 <prvAddCurrentTaskToDelayedList+0xcc>)
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	46c0      	nop			; (mov r8, r8)

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800440e:	e026      	b.n	800445e <prvAddCurrentTaskToDelayedList+0xba>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	18d3      	adds	r3, r2, r3
 8004416:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004418:	4b14      	ldr	r3, [pc, #80]	; (800446c <prvAddCurrentTaskToDelayedList+0xc8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	429a      	cmp	r2, r3
 8004426:	d209      	bcs.n	800443c <prvAddCurrentTaskToDelayedList+0x98>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004428:	4b12      	ldr	r3, [pc, #72]	; (8004474 <prvAddCurrentTaskToDelayedList+0xd0>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4b0f      	ldr	r3, [pc, #60]	; (800446c <prvAddCurrentTaskToDelayedList+0xc8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3304      	adds	r3, #4
 8004432:	0019      	movs	r1, r3
 8004434:	0010      	movs	r0, r2
 8004436:	f7fe fdb8 	bl	8002faa <vListInsert>
}
 800443a:	e010      	b.n	800445e <prvAddCurrentTaskToDelayedList+0xba>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800443c:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <prvAddCurrentTaskToDelayedList+0xd4>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b0a      	ldr	r3, [pc, #40]	; (800446c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3304      	adds	r3, #4
 8004446:	0019      	movs	r1, r3
 8004448:	0010      	movs	r0, r2
 800444a:	f7fe fdae 	bl	8002faa <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	429a      	cmp	r2, r3
 8004456:	d202      	bcs.n	800445e <prvAddCurrentTaskToDelayedList+0xba>
                        xNextTaskUnblockTime = xTimeToWake;
 8004458:	4b08      	ldr	r3, [pc, #32]	; (800447c <prvAddCurrentTaskToDelayedList+0xd8>)
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	601a      	str	r2, [r3, #0]
}
 800445e:	46c0      	nop			; (mov r8, r8)
 8004460:	46bd      	mov	sp, r7
 8004462:	b006      	add	sp, #24
 8004464:	bd80      	pop	{r7, pc}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	20000258 	.word	0x20000258
 800446c:	20000154 	.word	0x20000154
 8004470:	20000240 	.word	0x20000240
 8004474:	20000210 	.word	0x20000210
 8004478:	2000020c 	.word	0x2000020c
 800447c:	20000274 	.word	0x20000274

08004480 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004486:	2300      	movs	r3, #0
 8004488:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800448a:	f000 fa2d 	bl	80048e8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800448e:	4b0d      	ldr	r3, [pc, #52]	; (80044c4 <xTimerCreateTimerTask+0x44>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00c      	beq.n	80044b0 <xTimerCreateTimerTask+0x30>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004496:	2380      	movs	r3, #128	; 0x80
 8004498:	005a      	lsls	r2, r3, #1
 800449a:	490b      	ldr	r1, [pc, #44]	; (80044c8 <xTimerCreateTimerTask+0x48>)
 800449c:	480b      	ldr	r0, [pc, #44]	; (80044cc <xTimerCreateTimerTask+0x4c>)
 800449e:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <xTimerCreateTimerTask+0x50>)
 80044a0:	9301      	str	r3, [sp, #4]
 80044a2:	2302      	movs	r3, #2
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	2300      	movs	r3, #0
 80044a8:	f7ff f8b1 	bl	800360e <xTaskCreate>
 80044ac:	0003      	movs	r3, r0
 80044ae:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <xTimerCreateTimerTask+0x3a>
 80044b6:	b672      	cpsid	i
 80044b8:	e7fe      	b.n	80044b8 <xTimerCreateTimerTask+0x38>
        return xReturn;
 80044ba:	687b      	ldr	r3, [r7, #4]
    }
 80044bc:	0018      	movs	r0, r3
 80044be:	46bd      	mov	sp, r7
 80044c0:	b002      	add	sp, #8
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	200002b0 	.word	0x200002b0
 80044c8:	08004fb4 	.word	0x08004fb4
 80044cc:	0800457d 	.word	0x0800457d
 80044d0:	200002b4 	.word	0x200002b4

080044d4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80044e0:	e009      	b.n	80044f6 <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	18d3      	adds	r3, r2, r3
 80044ea:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	0010      	movs	r0, r2
 80044f4:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	18d1      	adds	r1, r2, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f8d8 	bl	80046b8 <prvInsertTimerInActiveList>
 8004508:	1e03      	subs	r3, r0, #0
 800450a:	d1ea      	bne.n	80044e2 <prvReloadTimer+0xe>
        }
    }
 800450c:	46c0      	nop			; (mov r8, r8)
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	46bd      	mov	sp, r7
 8004512:	b004      	add	sp, #16
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004522:	4b15      	ldr	r3, [pc, #84]	; (8004578 <prvProcessExpiredTimer+0x60>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3304      	adds	r3, #4
 8004530:	0018      	movs	r0, r3
 8004532:	f7fe fd70 	bl	8003016 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2228      	movs	r2, #40	; 0x28
 800453a:	5c9b      	ldrb	r3, [r3, r2]
 800453c:	001a      	movs	r2, r3
 800453e:	2304      	movs	r3, #4
 8004540:	4013      	ands	r3, r2
 8004542:	d006      	beq.n	8004552 <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	0018      	movs	r0, r3
 800454c:	f7ff ffc2 	bl	80044d4 <prvReloadTimer>
 8004550:	e008      	b.n	8004564 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2228      	movs	r2, #40	; 0x28
 8004556:	5c9b      	ldrb	r3, [r3, r2]
 8004558:	2201      	movs	r2, #1
 800455a:	4393      	bics	r3, r2
 800455c:	b2d9      	uxtb	r1, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2228      	movs	r2, #40	; 0x28
 8004562:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	0010      	movs	r0, r2
 800456c:	4798      	blx	r3
    }
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	46bd      	mov	sp, r7
 8004572:	b004      	add	sp, #16
 8004574:	bd80      	pop	{r7, pc}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	200002a8 	.word	0x200002a8

0800457c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004584:	2308      	movs	r3, #8
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	0018      	movs	r0, r3
 800458a:	f000 f853 	bl	8004634 <prvGetNextExpireTime>
 800458e:	0003      	movs	r3, r0
 8004590:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	0011      	movs	r1, r2
 8004598:	0018      	movs	r0, r3
 800459a:	f000 f803 	bl	80045a4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800459e:	f000 f8cd 	bl	800473c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045a2:	e7ef      	b.n	8004584 <prvTimerTask+0x8>

080045a4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80045ae:	f7ff fa37 	bl	8003a20 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045b2:	2308      	movs	r3, #8
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	0018      	movs	r0, r3
 80045b8:	f000 f85e 	bl	8004678 <prvSampleTimeNow>
 80045bc:	0003      	movs	r3, r0
 80045be:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d12b      	bne.n	800461e <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10c      	bne.n	80045e6 <prvProcessTimerOrBlockTask+0x42>
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d808      	bhi.n	80045e6 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 80045d4:	f7ff fa30 	bl	8003a38 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	0011      	movs	r1, r2
 80045de:	0018      	movs	r0, r3
 80045e0:	f7ff ff9a 	bl	8004518 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80045e4:	e01d      	b.n	8004622 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d008      	beq.n	80045fe <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80045ec:	4b0f      	ldr	r3, [pc, #60]	; (800462c <prvProcessTimerOrBlockTask+0x88>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <prvProcessTimerOrBlockTask+0x56>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <prvProcessTimerOrBlockTask+0x58>
 80045fa:	2300      	movs	r3, #0
 80045fc:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80045fe:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <prvProcessTimerOrBlockTask+0x8c>)
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	0019      	movs	r1, r3
 800460c:	f7fe ffcc 	bl	80035a8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004610:	f7ff fa12 	bl	8003a38 <xTaskResumeAll>
 8004614:	1e03      	subs	r3, r0, #0
 8004616:	d104      	bne.n	8004622 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8004618:	f000 fa2a 	bl	8004a70 <vPortYield>
    }
 800461c:	e001      	b.n	8004622 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 800461e:	f7ff fa0b 	bl	8003a38 <xTaskResumeAll>
    }
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	46bd      	mov	sp, r7
 8004626:	b004      	add	sp, #16
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	200002ac 	.word	0x200002ac
 8004630:	200002b0 	.word	0x200002b0

08004634 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800463c:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <prvGetNextExpireTime+0x40>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <prvGetNextExpireTime+0x16>
 8004646:	2201      	movs	r2, #1
 8004648:	e000      	b.n	800464c <prvGetNextExpireTime+0x18>
 800464a:	2200      	movs	r2, #0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d105      	bne.n	8004664 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004658:	4b06      	ldr	r3, [pc, #24]	; (8004674 <prvGetNextExpireTime+0x40>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	e001      	b.n	8004668 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004668:	68fb      	ldr	r3, [r7, #12]
    }
 800466a:	0018      	movs	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	b004      	add	sp, #16
 8004670:	bd80      	pop	{r7, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	200002a8 	.word	0x200002a8

08004678 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004680:	f7ff fac2 	bl	8003c08 <xTaskGetTickCount>
 8004684:	0003      	movs	r3, r0
 8004686:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8004688:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <prvSampleTimeNow+0x3c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	429a      	cmp	r2, r3
 8004690:	d205      	bcs.n	800469e <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8004692:	f000 f901 	bl	8004898 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	e002      	b.n	80046a4 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80046a4:	4b03      	ldr	r3, [pc, #12]	; (80046b4 <prvSampleTimeNow+0x3c>)
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 80046aa:	68fb      	ldr	r3, [r7, #12]
    }
 80046ac:	0018      	movs	r0, r3
 80046ae:	46bd      	mov	sp, r7
 80046b0:	b004      	add	sp, #16
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	200002b8 	.word	0x200002b8

080046b8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d812      	bhi.n	8004704 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	1ad2      	subs	r2, r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d302      	bcc.n	80046f2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80046ec:	2301      	movs	r3, #1
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	e01b      	b.n	800472a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <prvInsertTimerInActiveList+0x7c>)
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3304      	adds	r3, #4
 80046fa:	0019      	movs	r1, r3
 80046fc:	0010      	movs	r0, r2
 80046fe:	f7fe fc54 	bl	8002faa <vListInsert>
 8004702:	e012      	b.n	800472a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d206      	bcs.n	800471a <prvInsertTimerInActiveList+0x62>
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d302      	bcc.n	800471a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004714:	2301      	movs	r3, #1
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	e007      	b.n	800472a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800471a:	4b07      	ldr	r3, [pc, #28]	; (8004738 <prvInsertTimerInActiveList+0x80>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3304      	adds	r3, #4
 8004722:	0019      	movs	r1, r3
 8004724:	0010      	movs	r0, r2
 8004726:	f7fe fc40 	bl	8002faa <vListInsert>
            }
        }

        return xProcessTimerNow;
 800472a:	697b      	ldr	r3, [r7, #20]
    }
 800472c:	0018      	movs	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	b006      	add	sp, #24
 8004732:	bd80      	pop	{r7, pc}
 8004734:	200002ac 	.word	0x200002ac
 8004738:	200002a8 	.word	0x200002a8

0800473c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004742:	e095      	b.n	8004870 <prvProcessReceivedCommands+0x134>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004744:	1d3b      	adds	r3, r7, #4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	da00      	bge.n	800474e <prvProcessReceivedCommands+0x12>
 800474c:	e08f      	b.n	800486e <prvProcessReceivedCommands+0x132>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800474e:	1d3b      	adds	r3, r7, #4
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d004      	beq.n	8004766 <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	3304      	adds	r3, #4
 8004760:	0018      	movs	r0, r3
 8004762:	f7fe fc58 	bl	8003016 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004766:	003b      	movs	r3, r7
 8004768:	0018      	movs	r0, r3
 800476a:	f7ff ff85 	bl	8004678 <prvSampleTimeNow>
 800476e:	0003      	movs	r3, r0
 8004770:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 8004772:	1d3b      	adds	r3, r7, #4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b09      	cmp	r3, #9
 8004778:	d900      	bls.n	800477c <prvProcessReceivedCommands+0x40>
 800477a:	e079      	b.n	8004870 <prvProcessReceivedCommands+0x134>
 800477c:	009a      	lsls	r2, r3, #2
 800477e:	4b44      	ldr	r3, [pc, #272]	; (8004890 <prvProcessReceivedCommands+0x154>)
 8004780:	18d3      	adds	r3, r2, r3
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2228      	movs	r2, #40	; 0x28
 800478a:	5c9b      	ldrb	r3, [r3, r2]
 800478c:	2201      	movs	r2, #1
 800478e:	4313      	orrs	r3, r2
 8004790:	b2d9      	uxtb	r1, r3
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2228      	movs	r2, #40	; 0x28
 8004796:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004798:	1d3b      	adds	r3, r7, #4
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	18d1      	adds	r1, r2, r3
 80047a2:	1d3b      	adds	r3, r7, #4
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	6978      	ldr	r0, [r7, #20]
 80047aa:	f7ff ff85 	bl	80046b8 <prvInsertTimerInActiveList>
 80047ae:	1e03      	subs	r3, r0, #0
 80047b0:	d05e      	beq.n	8004870 <prvProcessReceivedCommands+0x134>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2228      	movs	r2, #40	; 0x28
 80047b6:	5c9b      	ldrb	r3, [r3, r2]
 80047b8:	001a      	movs	r2, r3
 80047ba:	2304      	movs	r3, #4
 80047bc:	4013      	ands	r3, r2
 80047be:	d00a      	beq.n	80047d6 <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80047c0:	1d3b      	adds	r3, r7, #4
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	18d1      	adds	r1, r2, r3
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	0018      	movs	r0, r3
 80047d0:	f7ff fe80 	bl	80044d4 <prvReloadTimer>
 80047d4:	e008      	b.n	80047e8 <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2228      	movs	r2, #40	; 0x28
 80047da:	5c9b      	ldrb	r3, [r3, r2]
 80047dc:	2201      	movs	r2, #1
 80047de:	4393      	bics	r3, r2
 80047e0:	b2d9      	uxtb	r1, r3
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2228      	movs	r2, #40	; 0x28
 80047e6:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	0010      	movs	r0, r2
 80047f0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80047f2:	e03d      	b.n	8004870 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2228      	movs	r2, #40	; 0x28
 80047f8:	5c9b      	ldrb	r3, [r3, r2]
 80047fa:	2201      	movs	r2, #1
 80047fc:	4393      	bics	r3, r2
 80047fe:	b2d9      	uxtb	r1, r3
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2228      	movs	r2, #40	; 0x28
 8004804:	5499      	strb	r1, [r3, r2]
                        break;
 8004806:	e033      	b.n	8004870 <prvProcessReceivedCommands+0x134>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2228      	movs	r2, #40	; 0x28
 800480c:	5c9b      	ldrb	r3, [r3, r2]
 800480e:	2201      	movs	r2, #1
 8004810:	4313      	orrs	r3, r2
 8004812:	b2d9      	uxtb	r1, r3
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2228      	movs	r2, #40	; 0x28
 8004818:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800481a:	1d3b      	adds	r3, r7, #4
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <prvProcessReceivedCommands+0xf2>
 800482a:	b672      	cpsid	i
 800482c:	e7fe      	b.n	800482c <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	18d1      	adds	r1, r2, r3
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	6978      	ldr	r0, [r7, #20]
 800483c:	f7ff ff3c 	bl	80046b8 <prvInsertTimerInActiveList>
                        break;
 8004840:	e016      	b.n	8004870 <prvProcessReceivedCommands+0x134>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2228      	movs	r2, #40	; 0x28
 8004846:	5c9b      	ldrb	r3, [r3, r2]
 8004848:	001a      	movs	r2, r3
 800484a:	2302      	movs	r3, #2
 800484c:	4013      	ands	r3, r2
 800484e:	d104      	bne.n	800485a <prvProcessReceivedCommands+0x11e>
                                {
                                    vPortFree( pxTimer );
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	0018      	movs	r0, r3
 8004854:	f000 fa60 	bl	8004d18 <vPortFree>
 8004858:	e00a      	b.n	8004870 <prvProcessReceivedCommands+0x134>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2228      	movs	r2, #40	; 0x28
 800485e:	5c9b      	ldrb	r3, [r3, r2]
 8004860:	2201      	movs	r2, #1
 8004862:	4393      	bics	r3, r2
 8004864:	b2d9      	uxtb	r1, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2228      	movs	r2, #40	; 0x28
 800486a:	5499      	strb	r1, [r3, r2]
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800486c:	e000      	b.n	8004870 <prvProcessReceivedCommands+0x134>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800486e:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004870:	4b08      	ldr	r3, [pc, #32]	; (8004894 <prvProcessReceivedCommands+0x158>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	1d39      	adds	r1, r7, #4
 8004876:	2200      	movs	r2, #0
 8004878:	0018      	movs	r0, r3
 800487a:	f7fe fd02 	bl	8003282 <xQueueReceive>
 800487e:	1e03      	subs	r3, r0, #0
 8004880:	d000      	beq.n	8004884 <prvProcessReceivedCommands+0x148>
 8004882:	e75f      	b.n	8004744 <prvProcessReceivedCommands+0x8>
        }
    }
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	46bd      	mov	sp, r7
 800488a:	b006      	add	sp, #24
 800488c:	bd80      	pop	{r7, pc}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	0800504c 	.word	0x0800504c
 8004894:	200002b0 	.word	0x200002b0

08004898 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800489e:	e00b      	b.n	80048b8 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048a0:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <prvSwitchTimerLists+0x48>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80048aa:	2301      	movs	r3, #1
 80048ac:	425a      	negs	r2, r3
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	0011      	movs	r1, r2
 80048b2:	0018      	movs	r0, r3
 80048b4:	f7ff fe30 	bl	8004518 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048b8:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <prvSwitchTimerLists+0x48>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1ee      	bne.n	80048a0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80048c2:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <prvSwitchTimerLists+0x48>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80048c8:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <prvSwitchTimerLists+0x4c>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <prvSwitchTimerLists+0x48>)
 80048ce:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 80048d0:	4b04      	ldr	r3, [pc, #16]	; (80048e4 <prvSwitchTimerLists+0x4c>)
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	601a      	str	r2, [r3, #0]
    }
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	46bd      	mov	sp, r7
 80048da:	b002      	add	sp, #8
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	200002a8 	.word	0x200002a8
 80048e4:	200002ac 	.word	0x200002ac

080048e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80048ec:	f000 f8d0 	bl	8004a90 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80048f0:	4b14      	ldr	r3, [pc, #80]	; (8004944 <prvCheckForValidListAndQueue+0x5c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d120      	bne.n	800493a <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 80048f8:	4b13      	ldr	r3, [pc, #76]	; (8004948 <prvCheckForValidListAndQueue+0x60>)
 80048fa:	0018      	movs	r0, r3
 80048fc:	f7fe fb2c 	bl	8002f58 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004900:	4b12      	ldr	r3, [pc, #72]	; (800494c <prvCheckForValidListAndQueue+0x64>)
 8004902:	0018      	movs	r0, r3
 8004904:	f7fe fb28 	bl	8002f58 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004908:	4b11      	ldr	r3, [pc, #68]	; (8004950 <prvCheckForValidListAndQueue+0x68>)
 800490a:	4a0f      	ldr	r2, [pc, #60]	; (8004948 <prvCheckForValidListAndQueue+0x60>)
 800490c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800490e:	4b11      	ldr	r3, [pc, #68]	; (8004954 <prvCheckForValidListAndQueue+0x6c>)
 8004910:	4a0e      	ldr	r2, [pc, #56]	; (800494c <prvCheckForValidListAndQueue+0x64>)
 8004912:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004914:	2200      	movs	r2, #0
 8004916:	210c      	movs	r1, #12
 8004918:	200a      	movs	r0, #10
 800491a:	f7fe fc2d 	bl	8003178 <xQueueGenericCreate>
 800491e:	0002      	movs	r2, r0
 8004920:	4b08      	ldr	r3, [pc, #32]	; (8004944 <prvCheckForValidListAndQueue+0x5c>)
 8004922:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004924:	4b07      	ldr	r3, [pc, #28]	; (8004944 <prvCheckForValidListAndQueue+0x5c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d006      	beq.n	800493a <prvCheckForValidListAndQueue+0x52>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800492c:	4b05      	ldr	r3, [pc, #20]	; (8004944 <prvCheckForValidListAndQueue+0x5c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a09      	ldr	r2, [pc, #36]	; (8004958 <prvCheckForValidListAndQueue+0x70>)
 8004932:	0011      	movs	r1, r2
 8004934:	0018      	movs	r0, r3
 8004936:	f7fe fdf3 	bl	8003520 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800493a:	f000 f8bb 	bl	8004ab4 <vPortExitCritical>
    }
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	200002b0 	.word	0x200002b0
 8004948:	20000280 	.word	0x20000280
 800494c:	20000294 	.word	0x20000294
 8004950:	200002a8 	.word	0x200002a8
 8004954:	200002ac 	.word	0x200002ac
 8004958:	08004fbc 	.word	0x08004fbc

0800495c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3b04      	subs	r3, #4
 800496c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2280      	movs	r2, #128	; 0x80
 8004972:	0452      	lsls	r2, r2, #17
 8004974:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3b04      	subs	r3, #4
 800497a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	3b04      	subs	r3, #4
 8004986:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8004988:	4a08      	ldr	r2, [pc, #32]	; (80049ac <pxPortInitialiseStack+0x50>)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3b14      	subs	r3, #20
 8004992:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3b20      	subs	r3, #32
 800499e:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80049a0:	68fb      	ldr	r3, [r7, #12]
}
 80049a2:	0018      	movs	r0, r3
 80049a4:	46bd      	mov	sp, r7
 80049a6:	b004      	add	sp, #16
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	080049b1 	.word	0x080049b1

080049b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80049ba:	4b08      	ldr	r3, [pc, #32]	; (80049dc <prvTaskExitError+0x2c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3301      	adds	r3, #1
 80049c0:	d001      	beq.n	80049c6 <prvTaskExitError+0x16>
 80049c2:	b672      	cpsid	i
 80049c4:	e7fe      	b.n	80049c4 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 80049c6:	b672      	cpsid	i

    while( ulDummy == 0 )
 80049c8:	46c0      	nop			; (mov r8, r8)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0fc      	beq.n	80049ca <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80049d0:	46c0      	nop			; (mov r8, r8)
 80049d2:	46c0      	nop			; (mov r8, r8)
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b002      	add	sp, #8
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	20000010 	.word	0x20000010

080049e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 80049e4:	46c0      	nop			; (mov r8, r8)
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	0000      	movs	r0, r0
 80049ec:	0000      	movs	r0, r0
	...

080049f0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 80049f0:	4a0b      	ldr	r2, [pc, #44]	; (8004a20 <pxCurrentTCBConst2>)
 80049f2:	6813      	ldr	r3, [r2, #0]
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	3020      	adds	r0, #32
 80049f8:	f380 8809 	msr	PSP, r0
 80049fc:	2002      	movs	r0, #2
 80049fe:	f380 8814 	msr	CONTROL, r0
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004a08:	46ae      	mov	lr, r5
 8004a0a:	bc08      	pop	{r3}
 8004a0c:	bc04      	pop	{r2}
 8004a0e:	b662      	cpsie	i
 8004a10:	4718      	bx	r3
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	46c0      	nop			; (mov r8, r8)
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	46c0      	nop			; (mov r8, r8)
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	46c0      	nop			; (mov r8, r8)
 8004a1e:	46c0      	nop			; (mov r8, r8)

08004a20 <pxCurrentTCBConst2>:
 8004a20:	20000154 	.word	0x20000154
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8004a24:	46c0      	nop			; (mov r8, r8)
 8004a26:	46c0      	nop			; (mov r8, r8)

08004a28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004a2c:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <xPortStartScheduler+0x40>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	4b0d      	ldr	r3, [pc, #52]	; (8004a68 <xPortStartScheduler+0x40>)
 8004a32:	21ff      	movs	r1, #255	; 0xff
 8004a34:	0409      	lsls	r1, r1, #16
 8004a36:	430a      	orrs	r2, r1
 8004a38:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <xPortStartScheduler+0x40>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <xPortStartScheduler+0x40>)
 8004a40:	21ff      	movs	r1, #255	; 0xff
 8004a42:	0609      	lsls	r1, r1, #24
 8004a44:	430a      	orrs	r2, r1
 8004a46:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004a48:	f000 f898 	bl	8004b7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004a4c:	4b07      	ldr	r3, [pc, #28]	; (8004a6c <xPortStartScheduler+0x44>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8004a52:	f7ff ffcd 	bl	80049f0 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004a56:	f7ff f9f1 	bl	8003e3c <vTaskSwitchContext>
    prvTaskExitError();
 8004a5a:	f7ff ffa9 	bl	80049b0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	0018      	movs	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	e000ed20 	.word	0xe000ed20
 8004a6c:	20000010 	.word	0x20000010

08004a70 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a74:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <vPortYield+0x1c>)
 8004a76:	2280      	movs	r2, #128	; 0x80
 8004a78:	0552      	lsls	r2, r2, #21
 8004a7a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8004a7c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004a80:	f3bf 8f6f 	isb	sy
}
 8004a84:	46c0      	nop			; (mov r8, r8)
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	e000ed04 	.word	0xe000ed04

08004a90 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004a94:	b672      	cpsid	i
    uxCriticalNesting++;
 8004a96:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <vPortEnterCritical+0x20>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <vPortEnterCritical+0x20>)
 8004a9e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8004aa0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004aa4:	f3bf 8f6f 	isb	sy
}
 8004aa8:	46c0      	nop			; (mov r8, r8)
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	20000010 	.word	0x20000010

08004ab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004ab8:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <vPortExitCritical+0x2c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <vPortExitCritical+0x10>
 8004ac0:	b672      	cpsid	i
 8004ac2:	e7fe      	b.n	8004ac2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004ac4:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <vPortExitCritical+0x2c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	1e5a      	subs	r2, r3, #1
 8004aca:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <vPortExitCritical+0x2c>)
 8004acc:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8004ace:	4b04      	ldr	r3, [pc, #16]	; (8004ae0 <vPortExitCritical+0x2c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d100      	bne.n	8004ad8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004ad6:	b662      	cpsie	i
    }
}
 8004ad8:	46c0      	nop			; (mov r8, r8)
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	20000010 	.word	0x20000010

08004ae4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8004ae4:	f3ef 8010 	mrs	r0, PRIMASK
 8004ae8:	b672      	cpsid	i
 8004aea:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8004aec:	46c0      	nop			; (mov r8, r8)
 8004aee:	0018      	movs	r0, r3

08004af0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8004af0:	f380 8810 	msr	PRIMASK, r0
 8004af4:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8004af6:	46c0      	nop			; (mov r8, r8)
	...

08004b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004b00:	f3ef 8009 	mrs	r0, PSP
 8004b04:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <pxCurrentTCBConst>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	3820      	subs	r0, #32
 8004b0a:	6010      	str	r0, [r2, #0]
 8004b0c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004b0e:	4644      	mov	r4, r8
 8004b10:	464d      	mov	r5, r9
 8004b12:	4656      	mov	r6, sl
 8004b14:	465f      	mov	r7, fp
 8004b16:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004b18:	b508      	push	{r3, lr}
 8004b1a:	b672      	cpsid	i
 8004b1c:	f7ff f98e 	bl	8003e3c <vTaskSwitchContext>
 8004b20:	b662      	cpsie	i
 8004b22:	bc0c      	pop	{r2, r3}
 8004b24:	6811      	ldr	r1, [r2, #0]
 8004b26:	6808      	ldr	r0, [r1, #0]
 8004b28:	3010      	adds	r0, #16
 8004b2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004b2c:	46a0      	mov	r8, r4
 8004b2e:	46a9      	mov	r9, r5
 8004b30:	46b2      	mov	sl, r6
 8004b32:	46bb      	mov	fp, r7
 8004b34:	f380 8809 	msr	PSP, r0
 8004b38:	3820      	subs	r0, #32
 8004b3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004b3c:	4718      	bx	r3
 8004b3e:	46c0      	nop			; (mov r8, r8)

08004b40 <pxCurrentTCBConst>:
 8004b40:	20000154 	.word	0x20000154
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8004b44:	46c0      	nop			; (mov r8, r8)
 8004b46:	46c0      	nop			; (mov r8, r8)

08004b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b4e:	f7ff ffc9 	bl	8004ae4 <ulSetInterruptMaskFromISR>
 8004b52:	0003      	movs	r3, r0
 8004b54:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004b56:	f7ff f865 	bl	8003c24 <xTaskIncrementTick>
 8004b5a:	1e03      	subs	r3, r0, #0
 8004b5c:	d003      	beq.n	8004b66 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b5e:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <SysTick_Handler+0x30>)
 8004b60:	2280      	movs	r2, #128	; 0x80
 8004b62:	0552      	lsls	r2, r2, #21
 8004b64:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f7ff ffc1 	bl	8004af0 <vClearInterruptMaskFromISR>
}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b002      	add	sp, #8
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	e000ed04 	.word	0xe000ed04

08004b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <vPortSetupTimerInterrupt+0x34>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <vPortSetupTimerInterrupt+0x38>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <vPortSetupTimerInterrupt+0x3c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	22fa      	movs	r2, #250	; 0xfa
 8004b92:	0091      	lsls	r1, r2, #2
 8004b94:	0018      	movs	r0, r3
 8004b96:	f7fb fab7 	bl	8000108 <__udivsi3>
 8004b9a:	0003      	movs	r3, r0
 8004b9c:	001a      	movs	r2, r3
 8004b9e:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <vPortSetupTimerInterrupt+0x40>)
 8004ba0:	3a01      	subs	r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8004ba4:	4b02      	ldr	r3, [pc, #8]	; (8004bb0 <vPortSetupTimerInterrupt+0x34>)
 8004ba6:	2207      	movs	r2, #7
 8004ba8:	601a      	str	r2, [r3, #0]
}
 8004baa:	46c0      	nop			; (mov r8, r8)
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	e000e010 	.word	0xe000e010
 8004bb4:	e000e018 	.word	0xe000e018
 8004bb8:	20000000 	.word	0x20000000
 8004bbc:	e000e014 	.word	0xe000e014

08004bc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8004bcc:	f7fe ff28 	bl	8003a20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004bd0:	4b4b      	ldr	r3, [pc, #300]	; (8004d00 <pvPortMalloc+0x140>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004bd8:	f000 f8ec 	bl	8004db4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bdc:	4b49      	ldr	r3, [pc, #292]	; (8004d04 <pvPortMalloc+0x144>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	4013      	ands	r3, r2
 8004be4:	d000      	beq.n	8004be8 <pvPortMalloc+0x28>
 8004be6:	e07e      	b.n	8004ce6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d012      	beq.n	8004c14 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8004bee:	2208      	movs	r2, #8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	189b      	adds	r3, r3, r2
 8004bf4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2207      	movs	r2, #7
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d00a      	beq.n	8004c14 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2207      	movs	r2, #7
 8004c02:	4393      	bics	r3, r2
 8004c04:	3308      	adds	r3, #8
 8004c06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2207      	movs	r2, #7
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d001      	beq.n	8004c14 <pvPortMalloc+0x54>
 8004c10:	b672      	cpsid	i
 8004c12:	e7fe      	b.n	8004c12 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d065      	beq.n	8004ce6 <pvPortMalloc+0x126>
 8004c1a:	4b3b      	ldr	r3, [pc, #236]	; (8004d08 <pvPortMalloc+0x148>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d860      	bhi.n	8004ce6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c24:	4b39      	ldr	r3, [pc, #228]	; (8004d0c <pvPortMalloc+0x14c>)
 8004c26:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004c28:	4b38      	ldr	r3, [pc, #224]	; (8004d0c <pvPortMalloc+0x14c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c2e:	e004      	b.n	8004c3a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d903      	bls.n	8004c4c <pvPortMalloc+0x8c>
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1f1      	bne.n	8004c30 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c4c:	4b2c      	ldr	r3, [pc, #176]	; (8004d00 <pvPortMalloc+0x140>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d047      	beq.n	8004ce6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2208      	movs	r2, #8
 8004c5c:	189b      	adds	r3, r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	1ad2      	subs	r2, r2, r3
 8004c70:	2308      	movs	r3, #8
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d916      	bls.n	8004ca6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	18d3      	adds	r3, r2, r3
 8004c7e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2207      	movs	r2, #7
 8004c84:	4013      	ands	r3, r2
 8004c86:	d001      	beq.n	8004c8c <pvPortMalloc+0xcc>
 8004c88:	b672      	cpsid	i
 8004c8a:	e7fe      	b.n	8004c8a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	1ad2      	subs	r2, r2, r3
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	f000 f8e7 	bl	8004e74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ca6:	4b18      	ldr	r3, [pc, #96]	; (8004d08 <pvPortMalloc+0x148>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	1ad2      	subs	r2, r2, r3
 8004cb0:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <pvPortMalloc+0x148>)
 8004cb2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cb4:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <pvPortMalloc+0x148>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	4b15      	ldr	r3, [pc, #84]	; (8004d10 <pvPortMalloc+0x150>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d203      	bcs.n	8004cc8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004cc0:	4b11      	ldr	r3, [pc, #68]	; (8004d08 <pvPortMalloc+0x148>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <pvPortMalloc+0x150>)
 8004cc6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <pvPortMalloc+0x144>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004cdc:	4b0d      	ldr	r3, [pc, #52]	; (8004d14 <pvPortMalloc+0x154>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <pvPortMalloc+0x154>)
 8004ce4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ce6:	f7fe fea7 	bl	8003a38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2207      	movs	r2, #7
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d001      	beq.n	8004cf6 <pvPortMalloc+0x136>
 8004cf2:	b672      	cpsid	i
 8004cf4:	e7fe      	b.n	8004cf4 <pvPortMalloc+0x134>
	return pvReturn;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
}
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b006      	add	sp, #24
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20000ec4 	.word	0x20000ec4
 8004d04:	20000ed8 	.word	0x20000ed8
 8004d08:	20000ec8 	.word	0x20000ec8
 8004d0c:	20000ebc 	.word	0x20000ebc
 8004d10:	20000ecc 	.word	0x20000ecc
 8004d14:	20000ed0 	.word	0x20000ed0

08004d18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d03a      	beq.n	8004da0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d2a:	2308      	movs	r3, #8
 8004d2c:	425b      	negs	r3, r3
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	18d3      	adds	r3, r2, r3
 8004d32:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	4b1a      	ldr	r3, [pc, #104]	; (8004da8 <vPortFree+0x90>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4013      	ands	r3, r2
 8004d42:	d101      	bne.n	8004d48 <vPortFree+0x30>
 8004d44:	b672      	cpsid	i
 8004d46:	e7fe      	b.n	8004d46 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <vPortFree+0x3c>
 8004d50:	b672      	cpsid	i
 8004d52:	e7fe      	b.n	8004d52 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	4b13      	ldr	r3, [pc, #76]	; (8004da8 <vPortFree+0x90>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d01f      	beq.n	8004da0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d11b      	bne.n	8004da0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <vPortFree+0x90>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	43db      	mvns	r3, r3
 8004d72:	401a      	ands	r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d78:	f7fe fe52 	bl	8003a20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <vPortFree+0x94>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	18d2      	adds	r2, r2, r3
 8004d86:	4b09      	ldr	r3, [pc, #36]	; (8004dac <vPortFree+0x94>)
 8004d88:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f000 f871 	bl	8004e74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d92:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <vPortFree+0x98>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <vPortFree+0x98>)
 8004d9a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8004d9c:	f7fe fe4c 	bl	8003a38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004da0:	46c0      	nop			; (mov r8, r8)
 8004da2:	46bd      	mov	sp, r7
 8004da4:	b004      	add	sp, #16
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	20000ed8 	.word	0x20000ed8
 8004dac:	20000ec8 	.word	0x20000ec8
 8004db0:	20000ed4 	.word	0x20000ed4

08004db4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004dba:	23c0      	movs	r3, #192	; 0xc0
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004dc0:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <prvHeapInit+0xa8>)
 8004dc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2207      	movs	r2, #7
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d00c      	beq.n	8004de6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3307      	adds	r3, #7
 8004dd0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2207      	movs	r2, #7
 8004dd6:	4393      	bics	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	1ad2      	subs	r2, r2, r3
 8004de0:	4b1e      	ldr	r3, [pc, #120]	; (8004e5c <prvHeapInit+0xa8>)
 8004de2:	18d3      	adds	r3, r2, r3
 8004de4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004dea:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <prvHeapInit+0xac>)
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004df0:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <prvHeapInit+0xac>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	18d3      	adds	r3, r2, r3
 8004dfc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004dfe:	2208      	movs	r2, #8
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	1a9b      	subs	r3, r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2207      	movs	r2, #7
 8004e0a:	4393      	bics	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4b14      	ldr	r3, [pc, #80]	; (8004e64 <prvHeapInit+0xb0>)
 8004e12:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8004e14:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <prvHeapInit+0xb0>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e1c:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <prvHeapInit+0xb0>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	1ad2      	subs	r2, r2, r3
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e32:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <prvHeapInit+0xb0>)
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <prvHeapInit+0xb4>)
 8004e40:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <prvHeapInit+0xb8>)
 8004e48:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e4a:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <prvHeapInit+0xbc>)
 8004e4c:	2280      	movs	r2, #128	; 0x80
 8004e4e:	0612      	lsls	r2, r2, #24
 8004e50:	601a      	str	r2, [r3, #0]
}
 8004e52:	46c0      	nop			; (mov r8, r8)
 8004e54:	46bd      	mov	sp, r7
 8004e56:	b004      	add	sp, #16
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	200002bc 	.word	0x200002bc
 8004e60:	20000ebc 	.word	0x20000ebc
 8004e64:	20000ec4 	.word	0x20000ec4
 8004e68:	20000ecc 	.word	0x20000ecc
 8004e6c:	20000ec8 	.word	0x20000ec8
 8004e70:	20000ed8 	.word	0x20000ed8

08004e74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e7c:	4b27      	ldr	r3, [pc, #156]	; (8004f1c <prvInsertBlockIntoFreeList+0xa8>)
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	e002      	b.n	8004e88 <prvInsertBlockIntoFreeList+0x14>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d8f7      	bhi.n	8004e82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	18d3      	adds	r3, r2, r3
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d108      	bne.n	8004eb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	18d2      	adds	r2, r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	18d2      	adds	r2, r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d118      	bne.n	8004efc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4b14      	ldr	r3, [pc, #80]	; (8004f20 <prvInsertBlockIntoFreeList+0xac>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d00d      	beq.n	8004ef2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	18d2      	adds	r2, r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	e008      	b.n	8004f04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <prvInsertBlockIntoFreeList+0xac>)
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	e003      	b.n	8004f04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d002      	beq.n	8004f12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	46bd      	mov	sp, r7
 8004f16:	b004      	add	sp, #16
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	20000ebc 	.word	0x20000ebc
 8004f20:	20000ec4 	.word	0x20000ec4

08004f24 <__libc_init_array>:
 8004f24:	b570      	push	{r4, r5, r6, lr}
 8004f26:	2600      	movs	r6, #0
 8004f28:	4d0c      	ldr	r5, [pc, #48]	; (8004f5c <__libc_init_array+0x38>)
 8004f2a:	4c0d      	ldr	r4, [pc, #52]	; (8004f60 <__libc_init_array+0x3c>)
 8004f2c:	1b64      	subs	r4, r4, r5
 8004f2e:	10a4      	asrs	r4, r4, #2
 8004f30:	42a6      	cmp	r6, r4
 8004f32:	d109      	bne.n	8004f48 <__libc_init_array+0x24>
 8004f34:	2600      	movs	r6, #0
 8004f36:	f000 f82b 	bl	8004f90 <_init>
 8004f3a:	4d0a      	ldr	r5, [pc, #40]	; (8004f64 <__libc_init_array+0x40>)
 8004f3c:	4c0a      	ldr	r4, [pc, #40]	; (8004f68 <__libc_init_array+0x44>)
 8004f3e:	1b64      	subs	r4, r4, r5
 8004f40:	10a4      	asrs	r4, r4, #2
 8004f42:	42a6      	cmp	r6, r4
 8004f44:	d105      	bne.n	8004f52 <__libc_init_array+0x2e>
 8004f46:	bd70      	pop	{r4, r5, r6, pc}
 8004f48:	00b3      	lsls	r3, r6, #2
 8004f4a:	58eb      	ldr	r3, [r5, r3]
 8004f4c:	4798      	blx	r3
 8004f4e:	3601      	adds	r6, #1
 8004f50:	e7ee      	b.n	8004f30 <__libc_init_array+0xc>
 8004f52:	00b3      	lsls	r3, r6, #2
 8004f54:	58eb      	ldr	r3, [r5, r3]
 8004f56:	4798      	blx	r3
 8004f58:	3601      	adds	r6, #1
 8004f5a:	e7f2      	b.n	8004f42 <__libc_init_array+0x1e>
 8004f5c:	0800507c 	.word	0x0800507c
 8004f60:	0800507c 	.word	0x0800507c
 8004f64:	0800507c 	.word	0x0800507c
 8004f68:	08005080 	.word	0x08005080

08004f6c <memcpy>:
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	b510      	push	{r4, lr}
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d100      	bne.n	8004f76 <memcpy+0xa>
 8004f74:	bd10      	pop	{r4, pc}
 8004f76:	5ccc      	ldrb	r4, [r1, r3]
 8004f78:	54c4      	strb	r4, [r0, r3]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	e7f8      	b.n	8004f70 <memcpy+0x4>

08004f7e <memset>:
 8004f7e:	0003      	movs	r3, r0
 8004f80:	1882      	adds	r2, r0, r2
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d100      	bne.n	8004f88 <memset+0xa>
 8004f86:	4770      	bx	lr
 8004f88:	7019      	strb	r1, [r3, #0]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	e7f9      	b.n	8004f82 <memset+0x4>
	...

08004f90 <_init>:
 8004f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f96:	bc08      	pop	{r3}
 8004f98:	469e      	mov	lr, r3
 8004f9a:	4770      	bx	lr

08004f9c <_fini>:
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa2:	bc08      	pop	{r3}
 8004fa4:	469e      	mov	lr, r3
 8004fa6:	4770      	bx	lr
